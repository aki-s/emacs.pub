<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="it"
 lang="it" dir="ltr">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>it:iterator:start</title>
<meta name="generator" content="DokuWiki" />
<meta name="robots" content="index,follow" />
<meta name="date" content="2010-10-28T18:18:10-0700" />
<meta name="keywords" content="it,iterator,start" />
<link rel="search" type="application/opensearchdescription+xml" href="http://www.cppreference.com/wiki/lib/exe/opensearch.php" title="C++ Reference" />
<link rel="start" href="../../../index.html" />
<link rel="contents" href="http://www.cppreference.com/wiki/it/iterator/start?do=index" title="Indice" />
<link rel="alternate" type="application/rss+xml" title="Recent Changes" href="http://www.cppreference.com/wiki/feed.php" />
<link rel="alternate" type="application/rss+xml" title="Current Namespace" href="http://www.cppreference.com/wiki/feed.php?mode=list&amp;ns=it:iterator" />
<link rel="alternate" type="text/html" title="Plain HTML" href="http://www.cppreference.com/wiki/_export/xhtml/it/iterator/start" />
<link rel="alternate" type="text/plain" title="Wiki Markup" href="http://www.cppreference.com/wiki/_export/raw/it/iterator/start" />
<link rel="canonical" href="iterators" />
<link rel="stylesheet" media="screen" type="text/css" href="../../lib/exe/css.php@t=custom1&amp;tseed=1289693594" />
<link rel="stylesheet" media="all" type="text/css" href="../../lib/exe/css.php@s=all&amp;t=custom1&amp;tseed=1289693594" />
<link rel="stylesheet" media="print" type="text/css" href="../../lib/exe/css.php@s=print&amp;t=custom1&amp;tseed=1289693594" />
<script type="text/javascript" ><!--//--><![CDATA[//><!--
var NS='it:iterator';var JSINFO = {"id":"it:iterator:start","namespace":"it:iterator"};
//--><!]]></script>
<script type="text/javascript" charset="utf-8" src="../../lib/exe/js.php@tseed=1289693594" ></script>
</head>
<body>
<div class="dokuwiki export">

<h2 class="sectionedit1"><a name="c_iterators" id="c_iterators">C++ Iterators</a></h2>
<div class="level2">

<p>
Gli iteratori sono usati per accedere i membri di una classe container e possono essere usati
in modo simile ai <em>puntatori</em>. Per esempio si può usare un iteratore per passare da un elemento
ad un altro di un vettore. Ci sono diversi tipi di iteratori:

</p>
<div class="table sectionedit2"><table class="inline">
	<tr class="row0">
		<th class="col0">Iterator</th><th class="col1">Description</th>
	</tr>
	<tr class="row1">
		<td class="col0">input_iterator</td><td class="col1">Legge valori muovendosi in avanti. Questo può essere incrementato, confrontato e &#039;dereferenced&#039;.</td>
	</tr>
	<tr class="row2">
		<td class="col0">output_iterator</td><td class="col1">Scrive valori con movimento in avanti. Possono essere incrementati e &#039;dereferenced&#039;</td>
	</tr>
	<tr class="row3">
		<td class="col0">forward_iterator</td><td class="col1">Legge o scrive valori con movimento in avanti. Questo combina le funzionalità degli iteratori di input e output con l&#039;abilità di immagazzinare il valore degli iteratori.</td>
	</tr>
	<tr class="row4">
		<td class="col0">bidirectional_iterator</td><td class="col1">Valori sia in lettura che scrittura con movimento bidirezionale. Come i forward_iterator, ma possono essere sia incrementati che decrementati.</td>
	</tr>
	<tr class="row5">
		<td class="col0">random_iterator</td><td class="col1">Accesso random in lettura e scrittura. Sono gli iteratori più potenti e combinano le funzionalità degli iteratori bidirezionali con l&#039;abilità di fare <em>pointer arithmetic</em> e confronto tra puntatori.</td>
	</tr>
	<tr class="row6">
		<td class="col0">reverse_iterator</td><td class="col1"> Sia un random_iterator o un bidirectional_iterator che si muove in direzione retrograda.</td>
	</tr>
</table></div>
<!-- EDIT2 TABLE [283-1212] -->
<p>

Ognuna delle classi container è associata ad un tipo di iteratore e ognuno degli <a href="http://www.cppreference.com/wiki/it/stl/algorithm/start" class="wikilink2" title="it:stl:algorithm:start" rel="nofollow">algoritmi della STL</a> usa un certo tipo
di iteratore.
</p>

<p>
Per esempio, i <a href="vector/start" class="wikilink1" title="it:stl:vector:start">vettori</a> sono associati con iteratori ad accesso random (random_iterator). Questo significa che
possono usare algoritmi che richiedono l&#039;accesso random. Dato che questi iteratori coprono tutte le caratteristiche 
degli altri iteratori, i vettori possono usare algoritmi progettati per altri iteratori.
</p>

<p>
Il codice che segue crea e usa un iteratore con un vettore:
</p>
<pre class="cpp code cpp">    vector<span class="sy1">&lt;</span><span class="kw4">int</span><span class="sy1">&gt;</span> the_vector<span class="sy4">;</span>
    vector<span class="sy1">&lt;</span><span class="kw4">int</span><span class="sy1">&gt;</span><span class="sy4">::</span><span class="me2">iterator</span> the_iterator<span class="sy4">;</span>
&nbsp;
    <span class="kw1">for</span><span class="br0">&#40;</span> <span class="kw4">int</span> i<span class="sy1">=</span><span class="nu0">0</span><span class="sy4">;</span> i <span class="sy1">&lt;</span> <span class="nu0">10</span><span class="sy4">;</span> i<span class="sy2">++</span> <span class="br0">&#41;</span> the_vector.<span class="me1">push_back</span><span class="br0">&#40;</span>i<span class="br0">&#41;</span><span class="sy4">;</span>
    <span class="kw4">int</span> total <span class="sy1">=</span> <span class="nu0">0</span><span class="sy4">;</span>
    the_iterator <span class="sy1">=</span> the_vector.<span class="me1">begin</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
    <span class="kw1">while</span><span class="br0">&#40;</span> the_iterator <span class="sy3">!</span><span class="sy1">=</span> the_vector.<span class="me1">end</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#41;</span> <span class="br0">&#123;</span>
      total <span class="sy2">+</span><span class="sy1">=</span> <span class="sy2">*</span>the_iterator<span class="sy4">;</span>
      <span class="sy2">++</span>the_iterator<span class="sy4">;</span>
    <span class="br0">&#125;</span>
&nbsp;
    <span class="kw3">cout</span> <span class="sy1">&lt;&lt;</span> <span class="st0">&quot;Total=&quot;</span> <span class="sy1">&lt;&lt;</span> total <span class="sy1">&lt;&lt;</span> endl<span class="sy4">;</span></pre>
<p>
Notate che potete accedere agli elementi di un container attraverso il <em>dereferencing</em> dell&#039;iteratore.
</p>

<p>
Argomenti correlati: <a href="http://www.oreillynet.com/pub/a/network/2005/10/18/what-is-iterator-in-c-plus-plus.html" class="urlextern" title="http://www.oreillynet.com/pub/a/network/2005/10/18/what-is-iterator-in-c-plus-plus.html"  rel="nofollow">http://www.oreillynet.com/pub/a/network/2005/10/18/what-is-iterator-in-c-plus-plus.html</a>
</p>

</div>
</div>
</body>
</html>
