<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="fr"
 lang="fr" dir="ltr">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>fr:c:other:va_arg</title>
<meta name="generator" content="DokuWiki" />
<meta name="robots" content="index,follow" />
<meta name="date" content="2010-10-28T18:17:57-0700" />
<meta name="keywords" content="fr,c,other,va_arg" />
<link rel="search" type="application/opensearchdescription+xml" href="http://www.cppreference.com/wiki/lib/exe/opensearch.php" title="C++ Reference" />
<link rel="start" href="../../../../index.html" />
<link rel="contents" href="http://www.cppreference.com/wiki/fr/c/other/va_arg?do=index" title="Index" />
<link rel="alternate" type="application/rss+xml" title="Recent Changes" href="http://www.cppreference.com/wiki/feed.php" />
<link rel="alternate" type="application/rss+xml" title="Current Namespace" href="http://www.cppreference.com/wiki/feed.php?mode=list&amp;ns=fr:c:other" />
<link rel="alternate" type="text/html" title="Plain HTML" href="http://www.cppreference.com/wiki/_export/xhtml/fr/c/other/va_arg" />
<link rel="alternate" type="text/plain" title="Wiki Markup" href="http://www.cppreference.com/wiki/_export/raw/fr/c/other/va_arg" />
<link rel="canonical" href="va_arg" />
<link rel="stylesheet" media="screen" type="text/css" href="../../../lib/exe/css.php@t=custom1&amp;tseed=1289693594" />
<link rel="stylesheet" media="all" type="text/css" href="../../../lib/exe/css.php@s=all&amp;t=custom1&amp;tseed=1289693594" />
<link rel="stylesheet" media="print" type="text/css" href="../../../lib/exe/css.php@s=print&amp;t=custom1&amp;tseed=1289693594" />
<script type="text/javascript" ><!--//--><![CDATA[//><!--
var NS='fr:c:other';var JSINFO = {"id":"fr:c:other:va_arg","namespace":"fr:c:other"};
//--><!]]></script>
<script type="text/javascript" charset="utf-8" src="../../../lib/exe/js.php@tseed=1289693594" ></script>
</head>
<body>
<div class="dokuwiki export">

<h2 class="sectionedit1"><a name="va_arg" id="va_arg">va_arg</a></h2>
<div class="level2">

<p>
Syntaxe :
</p>
<pre class="cpp code cpp">    <span class="co2">#include &lt;cstdarg&gt;</span>
    type <span class="kw3">va_arg</span><span class="br0">&#40;</span> <span class="kw4">va_list</span> argptr, type <span class="br0">&#41;</span><span class="sy4">;</span>
    <span class="kw4">void</span> <span class="kw3">va_end</span><span class="br0">&#40;</span> <span class="kw4">va_list</span> argptr <span class="br0">&#41;</span><span class="sy4">;</span>
    <span class="kw4">void</span> <span class="kw3">va_start</span><span class="br0">&#40;</span> <span class="kw4">va_list</span> argptr, last_parm <span class="br0">&#41;</span><span class="sy4">;</span></pre>
<p>
Les macros <code>va_arg()</code> sont utilisée pour passer un nombre de paramètres variables
à une fonction.

</p>
<ol>
<li class="level1"><div class="li"> D&#039;abord, vous devez faire un appel à <code>va_start()</code> en passant une <code>va_list</code> valide et un argument obligatoire qui précède immédiatement le <code>…</code> des arguments de la fonction. Si vous n&#039;avez qu&#039;un seul argument obligatoire, il est votre argument. Le prototype de la fonction doit comporter au moins un argument obligatoire. Ce paramètre peut être n&#039;importe quoi, un exemple d&#039;utilisation courante est d&#039;envoyer le nombre de paramètre de la liste de taille variable.</div>
</li>
<li class="level1"><div class="li"> Ensuite, vous devez appeler <code>va_arg()</code> en passant <code>va_list</code> et le type des argument à retourner. La valeur de retour de <code>va_arg()</code> est le paramètre courant.</div>
</li>
<li class="level1"><div class="li"> Répéter les appels à <code>va_arg()</code> jusqu&#039;à ce que vous soyez arrivé au bout de la liste des arguments.</div>
</li>
<li class="level1"><div class="li"> Enfin, un appel à <code>va_end()</code> en passant <code>va_list</code> en argument est nécessaire pour un nettoyage de la mémoire correct.</div>
</li>
</ol>

<p>

Par exemple :
</p>
<pre class="cpp code cpp">    <span class="kw4">int</span> somme<span class="br0">&#40;</span> <span class="kw4">int</span> nb, ... <span class="br0">&#41;</span> <span class="br0">&#123;</span>
      <span class="kw4">int</span> res <span class="sy1">=</span> <span class="nu0">0</span><span class="sy4">;</span>
      <span class="kw4">va_list</span> argptr<span class="sy4">;</span>
&nbsp;
      <span class="kw3">va_start</span><span class="br0">&#40;</span> argptr, nb<span class="br0">&#41;</span><span class="sy4">;</span>
&nbsp;
      <span class="kw1">for</span><span class="br0">&#40;</span> <span class="sy4">;</span> num <span class="sy1">&gt;</span> <span class="nu0">0</span><span class="sy4">;</span> num<span class="sy2">--</span> <span class="br0">&#41;</span> <span class="br0">&#123;</span>
        res <span class="sy2">+</span><span class="sy1">=</span> <span class="kw3">va_arg</span><span class="br0">&#40;</span> argptr, <span class="kw4">int</span> <span class="br0">&#41;</span><span class="sy4">;</span>
      <span class="br0">&#125;</span>
&nbsp;
      <span class="kw3">va_end</span><span class="br0">&#40;</span> argptr <span class="br0">&#41;</span><span class="sy4">;</span>
&nbsp;
      <span class="kw1">return</span> res<span class="sy4">;</span>
    <span class="br0">&#125;</span>
&nbsp;
    <span class="kw4">int</span> main<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp;
      <span class="kw4">int</span> res <span class="sy1">=</span> somme<span class="br0">&#40;</span> <span class="nu0">4</span>, <span class="nu0">4</span>, <span class="nu0">3</span>, <span class="nu0">2</span>, <span class="nu0">1</span> <span class="br0">&#41;</span><span class="sy4">;</span>
      <span class="kw3">printf</span><span class="br0">&#40;</span> <span class="st0">&quot;le résultat est %d<span class="es1">\n</span>&quot;</span>, res<span class="br0">&#41;</span><span class="sy4">;</span>
&nbsp;
      <span class="kw1">return</span> <span class="nu0">0</span> <span class="sy4">;</span>
    <span class="br0">&#125;</span></pre>
<p>
Ce code affiche 10 sur la sortie standard (4+3+2+1).
</p>

<p>
Voici un autre exemple de fonction à nombre d&#039;arguments variable qui
Here is another example of variable argument function, which is a simple
printing function:
</p>
<pre class="cpp code cpp">   <span class="kw4">void</span> mon_printf<span class="br0">&#40;</span><span class="kw4">char</span> <span class="sy2">*</span>format, ... <span class="br0">&#41;</span> <span class="br0">&#123;</span>
     <span class="kw4">va_list</span> argptr<span class="sy4">;</span>
&nbsp;
     <span class="kw3">va_start</span><span class="br0">&#40;</span>argptr, format<span class="br0">&#41;</span><span class="sy4">;</span>
&nbsp;
     <span class="kw1">while</span><span class="br0">&#40;</span><span class="sy2">*</span>format <span class="sy3">!</span><span class="sy1">=</span> <span class="st0">'<span class="es5">\0</span>'</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
       <span class="co1">// chaîne de charactères</span>
       <span class="kw1">if</span><span class="br0">&#40;</span><span class="sy2">*</span>format <span class="sy1">==</span> <span class="st0">'s'</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
         <span class="kw4">char</span><span class="sy2">*</span> s <span class="sy1">=</span> <span class="kw3">va_arg</span><span class="br0">&#40;</span>argptr, <span class="kw4">char</span> <span class="sy2">*</span><span class="br0">&#41;</span><span class="sy4">;</span>
         <span class="kw3">printf</span><span class="br0">&#40;</span><span class="st0">&quot;Affichage d'une chaîne de caractères : %s<span class="es1">\n</span>&quot;</span>, s<span class="br0">&#41;</span><span class="sy4">;</span>
       <span class="br0">&#125;</span>
       <span class="co1">// caractère</span>
       <span class="kw1">else</span> <span class="kw1">if</span><span class="br0">&#40;</span><span class="sy2">*</span>format <span class="sy1">==</span> <span class="st0">'c'</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
         <span class="kw4">char</span> c <span class="sy1">=</span> <span class="br0">&#40;</span><span class="kw4">char</span><span class="br0">&#41;</span> <span class="kw3">va_arg</span><span class="br0">&#40;</span>argptr, <span class="kw4">int</span><span class="br0">&#41;</span><span class="sy4">;</span>
         <span class="kw3">printf</span><span class="br0">&#40;</span><span class="st0">&quot;Affichage d'un caractère : %c<span class="es1">\n</span>&quot;</span>, c<span class="br0">&#41;</span><span class="sy4">;</span>
       <span class="br0">&#125;</span>
       <span class="co1">// integer</span>
       <span class="kw1">else</span> <span class="kw1">if</span><span class="br0">&#40;</span><span class="sy2">*</span>format <span class="sy1">==</span> <span class="st0">'d'</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
         <span class="kw4">int</span> d <span class="sy1">=</span> <span class="kw3">va_arg</span><span class="br0">&#40;</span>argptr, <span class="kw4">int</span><span class="br0">&#41;</span><span class="sy4">;</span>
         <span class="kw3">printf</span><span class="br0">&#40;</span><span class="st0">&quot;Affichage d'un entier : %d<span class="es1">\n</span>&quot;</span>, d<span class="br0">&#41;</span><span class="sy4">;</span>
       <span class="br0">&#125;</span>
&nbsp;
       format<span class="sy2">++</span><span class="sy4">;</span>
     <span class="br0">&#125;</span>
&nbsp;
     <span class="kw3">va_end</span><span class="br0">&#40;</span>argptr<span class="br0">&#41;</span><span class="sy4">;</span>
   <span class="br0">&#125;</span>
&nbsp;
   <span class="kw4">int</span> main<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp;
     mon_printf<span class="br0">&#40;</span> <span class="st0">&quot;sdc&quot;</span>, <span class="st0">&quot;Ceci est une chaîne de caractères&quot;</span>, <span class="nu0">29</span>, <span class="st0">'X'</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&nbsp;
     <span class="kw1">return</span> <span class="nu0">0</span><span class="sy4">;</span>
   <span class="br0">&#125;</span></pre>
<p>
Ce code produit ceci sur le flux de sortie
This code displays the following output when run:
</p>
<pre class="code">
   Affichage d'une chaîne de caractères : Ceci est une chaîne de caractères
   Affichage d'un entier : 29
   Affichage d'un caractère : X</pre>
</div>
</div>
</body>
</html>
