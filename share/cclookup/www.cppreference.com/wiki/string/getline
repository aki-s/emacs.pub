<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"
 lang="en" dir="ltr">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>string:getline</title>
<meta name="generator" content="DokuWiki" />
<meta name="robots" content="index,follow" />
<meta name="date" content="2010-11-07T10:19:59-0800" />
<meta name="keywords" content="string,getline" />
<link rel="search" type="application/opensearchdescription+xml" href="http://www.cppreference.com/wiki/lib/exe/opensearch.php" title="C++ Reference" />
<link rel="start" href="../../index.html" />
<link rel="contents" href="http://www.cppreference.com/wiki/string/getline?do=index" title="Sitemap" />
<link rel="alternate" type="application/rss+xml" title="Recent Changes" href="http://www.cppreference.com/wiki/feed.php" />
<link rel="alternate" type="application/rss+xml" title="Current Namespace" href="http://www.cppreference.com/wiki/feed.php?mode=list&amp;ns=string" />
<link rel="alternate" type="text/html" title="Plain HTML" href="http://www.cppreference.com/wiki/_export/xhtml/string/getline" />
<link rel="alternate" type="text/plain" title="Wiki Markup" href="http://www.cppreference.com/wiki/_export/raw/string/getline" />
<link rel="canonical" href="getline" />
<link rel="stylesheet" media="screen" type="text/css" href="../lib/exe/css.php@t=custom1&amp;tseed=1289693594" />
<link rel="stylesheet" media="all" type="text/css" href="../lib/exe/css.php@s=all&amp;t=custom1&amp;tseed=1289693594" />
<link rel="stylesheet" media="print" type="text/css" href="../lib/exe/css.php@s=print&amp;t=custom1&amp;tseed=1289693594" />
<script type="text/javascript" ><!--//--><![CDATA[//><!--
var NS='string';var JSINFO = {"id":"string:getline","namespace":"string"};
//--><!]]></script>
<script type="text/javascript" charset="utf-8" src="../lib/exe/js.php@tseed=1289693594" ></script>
</head>
<body>
<div class="dokuwiki export">
<!-- TOC START -->
<div class="toc">
<div class="tocheader toctoggle" id="toc__header">Table of Contents</div>
<div id="toc__inside">

<ul class="toc">
<li class="clear">

<ul class="toc">
<li class="level2"><div class="li"><span class="li"><a href="getline#getline" class="toc">getline</a></span></div>
<ul class="toc">
<li class="level3"><div class="li"><span class="li"><a href="getline#parameters" class="toc">Parameters</a></span></div></li>
<li class="level3"><div class="li"><span class="li"><a href="getline#return_value" class="toc">Return value</a></span></div></li>
<li class="level3"><div class="li"><span class="li"><a href="getline#example" class="toc">Example</a></span></div></li>
<li class="level3"><div class="li"><span class="li"><a href="getline#see_also" class="toc">See also</a></span></div></li></ul>
</li></ul>
</li></ul>
</div>
</div>
<!-- TOC END -->

<h2 class="sectionedit1"><a name="getline" id="getline">getline</a></h2>
<div class="level2">
<pre class="cpp code cpp"><span class="co2">#include &lt;string&gt;</span>
&nbsp;
<span class="kw2">template</span><span class="sy1">&lt;</span> <span class="kw2">class</span> Char, <span class="kw2">class</span> Traits <span class="sy1">&gt;</span>
std<span class="sy4">::</span><span class="me2">basic_istream</span><span class="sy1">&lt;</span> Char, Traits <span class="sy1">&gt;</span><span class="sy3">&amp;</span> getline<span class="br0">&#40;</span> std<span class="sy4">::</span><span class="me2">basic_istream</span><span class="sy1">&lt;</span> Char, Traits <span class="sy1">&gt;</span><span class="sy3">&amp;</span> in,
                                             std<span class="sy4">::</span><span class="me2">basic_string</span><span class="sy1">&lt;</span> Char, Traits <span class="sy1">&gt;</span><span class="sy3">&amp;</span> str <span class="br0">&#41;</span><span class="sy4">;</span>
&nbsp;
<span class="kw2">template</span><span class="sy1">&lt;</span> <span class="kw2">class</span> Char, <span class="kw2">class</span> Traits <span class="sy1">&gt;</span>
std<span class="sy4">::</span><span class="me2">basic_istream</span><span class="sy1">&lt;</span> Char, Traits <span class="sy1">&gt;</span><span class="sy3">&amp;</span> getline<span class="br0">&#40;</span> std<span class="sy4">::</span><span class="me2">basic_istream</span><span class="sy1">&lt;</span> Char, Traits <span class="sy1">&gt;</span><span class="sy3">&amp;</span> in,
                                             std<span class="sy4">::</span><span class="me2">basic_string</span><span class="sy1">&lt;</span> Char, Traits <span class="sy1">&gt;</span><span class="sy3">&amp;</span> str,
                                             Char delim<span class="br0">&#41;</span><span class="sy4">;</span></pre>
<p>
Reads characters from <code>in</code> input stream until delimiting character (<code>&#039;\n&#039;</code> or <code>delim</code>) is found and saves them to the given string <code>str</code>. If delimiter is found, it is discarded.
</p>

</div>
<!-- EDIT1 SECTION "getline" [1-739] -->
<h3 class="sectionedit2"><a name="parameters" id="parameters">Parameters</a></h3>
<div class="level3">

<p>

<code>in</code> - input stream to read from
</p>

<p>
<code>str</code> - string to store the read characters to
</p>

<p>
<code>delim</code> - delimiting character

</p>

</div>
<!-- EDIT2 SECTION "Parameters" [740-878] -->
<h3 class="sectionedit3"><a name="return_value" id="return_value">Return value</a></h3>
<div class="level3">

<p>

<code>in</code>. Errors are signalled through <code>in</code> state flags.
</p>

</div>
<!-- EDIT3 SECTION "Return value" [879-958] -->
<h3 class="sectionedit4"><a name="example" id="example">Example</a></h3>
<div class="level3">

<p>

<a href="../todo" class="wikilink1" title="todo">todo</a>
</p>

<p>
The following code reads a line of text from stdin and displays it
to stdout:
</p>
<pre class="cpp code cpp">   string s<span class="sy4">;</span>
   getline<span class="br0">&#40;</span> <span class="kw3">cin</span>, s <span class="br0">&#41;</span><span class="sy4">;</span>
   <span class="kw3">cout</span> <span class="sy1">&lt;&lt;</span> <span class="st0">&quot;You entered &quot;</span> <span class="sy1">&lt;&lt;</span> s <span class="sy1">&lt;&lt;</span> endl<span class="sy4">;</span></pre>
<p>
After getting a line of data in a string, you may find that <a href="../io/sstream/start" class="wikilink1" title="io:sstream:start">stringstreams</a> are
useful in extracting data from that string. For example, the following code
reads numbers from standard input, ignoring any “commented” lines that begin
with double slashes:
</p>
<pre class="cpp code cpp">    <span class="co1">// expects either space-delimited numbers or lines that start with</span>
    <span class="co1">// two forward slashes (//)</span>
    string s<span class="sy4">;</span>
    <span class="kw1">while</span><span class="br0">&#40;</span> getline<span class="br0">&#40;</span><span class="kw3">cin</span>,s<span class="br0">&#41;</span> <span class="br0">&#41;</span> <span class="br0">&#123;</span>
      <span class="kw1">if</span><span class="br0">&#40;</span> s.<span class="me1">size</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy1">&gt;=</span> <span class="nu0">2</span> <span class="sy3">&amp;&amp;</span> s<span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span> <span class="sy1">==</span> <span class="st0">'/'</span> <span class="sy3">&amp;&amp;</span> s<span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span> <span class="sy1">==</span> <span class="st0">'/'</span> <span class="br0">&#41;</span> <span class="br0">&#123;</span>
        <span class="kw3">cout</span> <span class="sy1">&lt;&lt;</span> <span class="st0">&quot;  ignoring comment: &quot;</span> <span class="sy1">&lt;&lt;</span> s <span class="sy1">&lt;&lt;</span> endl<span class="sy4">;</span>
      <span class="br0">&#125;</span> <span class="kw1">else</span> <span class="br0">&#123;</span>
        istringstream ss<span class="br0">&#40;</span>s<span class="br0">&#41;</span><span class="sy4">;</span>
        <span class="kw4">double</span> d<span class="sy4">;</span>
        <span class="kw1">while</span><span class="br0">&#40;</span> ss <span class="sy1">&gt;&gt;</span> d <span class="br0">&#41;</span> <span class="br0">&#123;</span>
          <span class="kw3">cout</span> <span class="sy1">&lt;&lt;</span> <span class="st0">&quot;  got a number: &quot;</span> <span class="sy1">&lt;&lt;</span> d <span class="sy1">&lt;&lt;</span> endl<span class="sy4">;</span>
        <span class="br0">&#125;</span>
      <span class="br0">&#125;</span>
    <span class="br0">&#125;</span></pre>
<p>
When run with a user supplying input, the above code might produce this output:
</p>
<pre class="code">
    // test
      ignoring comment: // test
    23.3 -1 3.14159
      got a number: 23.3
      got a number: -1
      got a number: 3.14159
    // next batch
      ignoring comment: // next batch
    1 2 3 4 5
      got a number: 1
      got a number: 2
      got a number: 3
      got a number: 4
      got a number: 5
    50
      got a number: 50</pre>
</div>
<!-- EDIT4 SECTION "Example" [959-2319] -->
<h3 class="sectionedit5"><a name="see_also" id="see_also">See also</a></h3>
<div class="level3">

<p>

<a href="../todo" class="wikilink1" title="todo">todo</a>
</p>

</div>
<!-- EDIT5 SECTION "See also" [2320-] --></div>
</body>
</html>
