<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"
 lang="en" dir="ltr">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>algorithm:accumulate</title>
<meta name="generator" content="DokuWiki" />
<meta name="robots" content="index,follow" />
<meta name="date" content="2010-11-03T07:51:26-0700" />
<meta name="keywords" content="algorithm,accumulate" />
<link rel="search" type="application/opensearchdescription+xml" href="http://www.cppreference.com/wiki/lib/exe/opensearch.php" title="C++ Reference" />
<link rel="start" href="../../../index.html" />
<link rel="contents" href="http://www.cppreference.com/wiki/algorithm/accumulate?do=index" title="Sitemap" />
<link rel="alternate" type="application/rss+xml" title="Recent Changes" href="http://www.cppreference.com/wiki/feed.php" />
<link rel="alternate" type="application/rss+xml" title="Current Namespace" href="http://www.cppreference.com/wiki/feed.php?mode=list&amp;ns=algorithm" />
<link rel="alternate" type="text/html" title="Plain HTML" href="http://www.cppreference.com/wiki/_export/xhtml/algorithm/accumulate" />
<link rel="alternate" type="text/plain" title="Wiki Markup" href="http://www.cppreference.com/wiki/_export/raw/algorithm/accumulate" />
<link rel="canonical" href="accumulate" />
<link rel="stylesheet" media="screen" type="text/css" href="../../lib/exe/css.php@t=custom1&amp;tseed=1289693594" />
<link rel="stylesheet" media="all" type="text/css" href="../../lib/exe/css.php@s=all&amp;t=custom1&amp;tseed=1289693594" />
<link rel="stylesheet" media="print" type="text/css" href="../../lib/exe/css.php@s=print&amp;t=custom1&amp;tseed=1289693594" />
<script type="text/javascript" ><!--//--><![CDATA[//><!--
var NS='algorithm';var JSINFO = {"id":"algorithm:accumulate","namespace":"algorithm"};
//--><!]]></script>
<script type="text/javascript" charset="utf-8" src="../../lib/exe/js.php@tseed=1289693594" ></script>
</head>
<body>
<div class="dokuwiki export">
<!-- TOC START -->
<div class="toc">
<div class="tocheader toctoggle" id="toc__header">Table of Contents</div>
<div id="toc__inside">

<ul class="toc">
<li class="clear">

<ul class="toc">
<li class="level2"><div class="li"><span class="li"><a href="accumulate#accumulate" class="toc">accumulate</a></span></div>
<ul class="toc">
<li class="level3"><div class="li"><span class="li"><a href="accumulate#parameters" class="toc">Parameters</a></span></div></li>
<li class="level3"><div class="li"><span class="li"><a href="accumulate#return_value" class="toc">Return value</a></span></div></li>
<li class="level3"><div class="li"><span class="li"><a href="accumulate#equivalent_function" class="toc">Equivalent function</a></span></div></li>
<li class="level3"><div class="li"><span class="li"><a href="accumulate#example" class="toc">Example</a></span></div></li>
<li class="level3"><div class="li"><span class="li"><a href="accumulate#complexity" class="toc">Complexity</a></span></div></li>
<li class="level3"><div class="li"><span class="li"><a href="accumulate#see_also" class="toc">See also</a></span></div></li></ul>
</li></ul>
</li></ul>
</div>
</div>
<!-- TOC END -->

<h2 class="sectionedit1"><a name="accumulate" id="accumulate">accumulate</a></h2>
<div class="level2">
<pre class="cpp code cpp">    <span class="co2">#include &lt;numeric&gt;</span>
&nbsp;
    <span class="kw2">template</span><span class="sy1">&lt;</span> <span class="kw2">class</span> InputIterator, <span class="kw2">class</span> T <span class="sy1">&gt;</span>
    T accumulate<span class="br0">&#40;</span> InputIterator first, InputIterator last, T value <span class="br0">&#41;</span><span class="sy4">;</span>
&nbsp;
    <span class="kw2">template</span><span class="sy1">&lt;</span> <span class="kw2">class</span> InputIterator, <span class="kw2">class</span> T, <span class="kw2">class</span> BinaryOperation <span class="sy1">&gt;</span>
    T accumulate<span class="br0">&#40;</span> InputIterator first, InputIterator last, T value, BinaryOperation binary_op <span class="br0">&#41;</span><span class="sy4">;</span></pre>
<p>
Computes the sum of the given value <code>value</code> and the elements in the range <code>[start, end)</code>. One version of the function uses <code>operator+</code> to sum the elements, another uses the given binary operation <code>binary_op</code>.
</p>

</div>
<!-- EDIT1 SECTION "accumulate" [1-561] -->
<h3 class="sectionedit2"><a name="parameters" id="parameters">Parameters</a></h3>
<div class="level3">

<p>

<code>first</code>, <code>last</code> - the range of elements to be accumulated.
</p>

<p>
<code>binary_op</code> - binary function returning the result of accumulation operation of two values.
</p>

</div>
<!-- EDIT2 SECTION "Parameters" [562-740] -->
<h3 class="sectionedit3"><a name="return_value" id="return_value">Return value</a></h3>
<div class="level3">

<p>

the sum of the given value and the values of the given elements.
</p>

</div>
<!-- EDIT3 SECTION "Return value" [741-828] -->
<h3 class="sectionedit4"><a name="equivalent_function" id="equivalent_function">Equivalent function</a></h3>
<div class="level3">

<p>

First version:
</p>
<pre class="cpp code cpp">    <span class="kw2">template</span><span class="sy1">&lt;</span> <span class="kw2">class</span> InputIterator, <span class="kw2">class</span> T <span class="sy1">&gt;</span>
    T accumulate<span class="br0">&#40;</span> InputIterator first, InputIterator last, T value <span class="br0">&#41;</span>
    <span class="br0">&#123;</span>
        <span class="kw1">for</span> <span class="br0">&#40;</span><span class="sy4">;</span> first <span class="sy3">!</span><span class="sy1">=</span> last<span class="sy4">;</span> <span class="sy2">++</span>first<span class="br0">&#41;</span> <span class="br0">&#123;</span>
            value <span class="sy1">=</span> value <span class="sy2">+</span> <span class="sy2">*</span>first<span class="sy4">;</span>
        <span class="br0">&#125;</span>
        <span class="kw1">return</span> value<span class="sy4">;</span>
    <span class="br0">&#125;</span></pre>
<p>
Second version:
</p>
<pre class="cpp code cpp">    <span class="kw2">template</span><span class="sy1">&lt;</span> <span class="kw2">class</span> InputIterator, <span class="kw2">class</span> T, <span class="kw2">class</span> BinaryOperation <span class="sy1">&gt;</span>
    T accumulate<span class="br0">&#40;</span> InputIterator first, InputIterator last, T value, BinaryOperation binary_op <span class="br0">&#41;</span>
    <span class="br0">&#123;</span>
        <span class="kw1">for</span> <span class="br0">&#40;</span><span class="sy4">;</span> first <span class="sy3">!</span><span class="sy1">=</span> last<span class="sy4">;</span> <span class="sy2">++</span>first<span class="br0">&#41;</span> <span class="br0">&#123;</span>
            value <span class="sy1">=</span> binary_op<span class="br0">&#40;</span> value, <span class="sy2">*</span>first <span class="br0">&#41;</span><span class="sy4">;</span>
        <span class="br0">&#125;</span>
        <span class="kw1">return</span> value<span class="sy4">;</span>
    <span class="br0">&#125;</span></pre>
</div>
<!-- EDIT4 SECTION "Equivalent function" [829-1456] -->
<h3 class="sectionedit5"><a name="example" id="example">Example</a></h3>
<div class="level3">

<p>

The following code uses <code>accumulate</code> to sum the integers in a <a href="../vector/start" class="wikilink1" title="container:vector:start">vector</a>:
</p>
<pre class="cpp code cpp"><span class="co2">#include &lt;iostream&gt;</span>
<span class="co2">#include &lt;vector&gt;</span>
<span class="co2">#include &lt;numeric&gt;</span>
&nbsp;
<span class="kw4">int</span> main<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
  std<span class="sy4">::</span><span class="me2">vector</span><span class="sy1">&lt;</span><span class="kw4">int</span><span class="sy1">&gt;</span> v<span class="sy4">;</span>
  <span class="kw4">const</span> <span class="kw4">int</span> start <span class="sy1">=</span> <span class="nu0">1</span>, end <span class="sy1">=</span> <span class="nu0">10</span><span class="sy4">;</span>
  <span class="kw1">for</span> <span class="br0">&#40;</span><span class="kw4">int</span> i <span class="sy1">=</span> start<span class="sy4">;</span> i <span class="sy1">&lt;=</span> end<span class="sy4">;</span> <span class="sy2">++</span>i<span class="br0">&#41;</span> v.<span class="me1">push_back</span><span class="br0">&#40;</span> i <span class="br0">&#41;</span><span class="sy4">;</span>
&nbsp;
  <span class="kw4">int</span> sum <span class="sy1">=</span> std<span class="sy4">::</span><span class="me2">accumulate</span><span class="br0">&#40;</span> v.<span class="me1">begin</span><span class="br0">&#40;</span><span class="br0">&#41;</span>, v.<span class="me1">end</span><span class="br0">&#40;</span><span class="br0">&#41;</span>, <span class="nu0">0</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&nbsp;
  std<span class="sy4">::</span><span class="kw3">cout</span> <span class="sy1">&lt;&lt;</span> <span class="st0">&quot;sum from &quot;</span> <span class="sy1">&lt;&lt;</span> start <span class="sy1">&lt;&lt;</span> <span class="st0">&quot; to &quot;</span> <span class="sy1">&lt;&lt;</span> end <span class="sy1">&lt;&lt;</span> <span class="st0">&quot; is &quot;</span> <span class="sy1">&lt;&lt;</span> sum <span class="sy1">&lt;&lt;</span> std<span class="sy4">::</span><span class="me2">endl</span><span class="sy4">;</span>
<span class="br0">&#125;</span></pre>
<p>
The <code>accumulate</code> function can also be used on non-numerical types.  The following
example uses <code>accumulate</code> to concatenate all of the <a href="../../string/start" class="wikilink1" title="string:start">strings</a> in a 
<a href="../vector/start" class="wikilink1" title="stl:vector:start">vector</a> into a single string:
</p>
<pre class="cpp code cpp"><span class="kw4">int</span> main <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
    string str <span class="sy1">=</span> <span class="st0">&quot;Hello World!&quot;</span><span class="sy4">;</span>
    vector<span class="sy1">&lt;</span>string<span class="sy1">&gt;</span> vec<span class="br0">&#40;</span><span class="nu0">10</span>,str<span class="br0">&#41;</span><span class="sy4">;</span>   <span class="co1">// vec = [&quot;Hello World!&quot;, &quot;Hello World!&quot;, ...]</span>
    string a <span class="sy1">=</span> accumulate<span class="br0">&#40;</span> vec.<span class="me1">begin</span><span class="br0">&#40;</span><span class="br0">&#41;</span>, vec.<span class="me1">end</span><span class="br0">&#40;</span><span class="br0">&#41;</span>, string<span class="br0">&#40;</span><span class="st0">&quot;&quot;</span><span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
    <span class="kw3">cout</span> <span class="sy1">&lt;&lt;</span> a <span class="sy1">&lt;&lt;</span> endl<span class="sy4">;</span>            <span class="co1">// displays &quot;Hello World!Hello World!Hello...&quot;</span>
<span class="br0">&#125;</span></pre>
</div>
<!-- EDIT5 SECTION "Example" [1457-2403] -->
<h3 class="sectionedit6"><a name="complexity" id="complexity">Complexity</a></h3>
<div class="level3">

<p>

linear in the distance between <code>first</code> and <code>last</code>
</p>

</div>
<!-- EDIT6 SECTION "Complexity" [2404-2478] -->
<h3 class="sectionedit7"><a name="see_also" id="see_also">See also</a></h3>
<div class="level3">

<p>

<a href="adjacent_difference" class="wikilink1" title="algorithm:adjacent_difference">adjacent_difference</a>, <a href="count" class="wikilink1" title="algorithm:count">count</a>, <a href="inner_product" class="wikilink1" title="algorithm:inner_product">inner_product</a>, <a href="partial_sum" class="wikilink1" title="algorithm:partial_sum">partial_sum</a>
</p>

</div>
<!-- EDIT7 SECTION "See also" [2479-] --></div>
</body>
</html>
