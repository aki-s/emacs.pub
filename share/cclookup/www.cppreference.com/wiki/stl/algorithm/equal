<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"
 lang="en" dir="ltr">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>algorithm:equal</title>
<meta name="generator" content="DokuWiki" />
<meta name="robots" content="index,follow" />
<meta name="date" content="2010-11-13T04:38:34-0800" />
<meta name="keywords" content="algorithm,equal" />
<link rel="search" type="application/opensearchdescription+xml" href="http://www.cppreference.com/wiki/lib/exe/opensearch.php" title="C++ Reference" />
<link rel="start" href="../../../index.html" />
<link rel="contents" href="http://www.cppreference.com/wiki/algorithm/equal?do=index" title="Sitemap" />
<link rel="alternate" type="application/rss+xml" title="Recent Changes" href="http://www.cppreference.com/wiki/feed.php" />
<link rel="alternate" type="application/rss+xml" title="Current Namespace" href="http://www.cppreference.com/wiki/feed.php?mode=list&amp;ns=algorithm" />
<link rel="alternate" type="text/html" title="Plain HTML" href="http://www.cppreference.com/wiki/_export/xhtml/algorithm/equal" />
<link rel="alternate" type="text/plain" title="Wiki Markup" href="http://www.cppreference.com/wiki/_export/raw/algorithm/equal" />
<link rel="canonical" href="equal" />
<link rel="stylesheet" media="screen" type="text/css" href="../../lib/exe/css.php@t=custom1&amp;tseed=1289693594" />
<link rel="stylesheet" media="all" type="text/css" href="../../lib/exe/css.php@s=all&amp;t=custom1&amp;tseed=1289693594" />
<link rel="stylesheet" media="print" type="text/css" href="../../lib/exe/css.php@s=print&amp;t=custom1&amp;tseed=1289693594" />
<script type="text/javascript" ><!--//--><![CDATA[//><!--
var NS='algorithm';var JSINFO = {"id":"algorithm:equal","namespace":"algorithm"};
//--><!]]></script>
<script type="text/javascript" charset="utf-8" src="../../lib/exe/js.php@tseed=1289693594" ></script>
</head>
<body>
<div class="dokuwiki export">
<!-- TOC START -->
<div class="toc">
<div class="tocheader toctoggle" id="toc__header">Table of Contents</div>
<div id="toc__inside">

<ul class="toc">
<li class="clear">

<ul class="toc">
<li class="level2"><div class="li"><span class="li"><a href="equal#equal" class="toc">equal</a></span></div>
<ul class="toc">
<li class="level3"><div class="li"><span class="li"><a href="equal#parameters" class="toc">Parameters</a></span></div></li>
<li class="level3"><div class="li"><span class="li"><a href="equal#return_value" class="toc">Return value</a></span></div></li>
<li class="level3"><div class="li"><span class="li"><a href="equal#equivalent_function" class="toc">Equivalent function</a></span></div></li>
<li class="level3"><div class="li"><span class="li"><a href="equal#example" class="toc">Example</a></span></div></li>
<li class="level3"><div class="li"><span class="li"><a href="equal#complexity" class="toc">Complexity</a></span></div></li>
<li class="level3"><div class="li"><span class="li"><a href="equal#see_also" class="toc">See also</a></span></div></li></ul>
</li></ul>
</li></ul>
</div>
</div>
<!-- TOC END -->

<h2 class="sectionedit1"><a name="equal" id="equal">equal</a></h2>
<div class="level2">
<pre class="cpp code cpp"><span class="co2">#include &lt;algorithm&gt;</span>
&nbsp;
<span class="kw2">template</span><span class="sy1">&lt;</span> <span class="kw2">class</span> InputIterator1, <span class="kw2">class</span> InputIterator2 <span class="sy1">&gt;</span>
<span class="kw4">bool</span> equal<span class="br0">&#40;</span> InputIterator1 first1, InputIterator1 last1,
            InputIterator2 first2 <span class="br0">&#41;</span><span class="sy4">;</span>
&nbsp;
<span class="kw2">template</span><span class="sy1">&lt;</span> <span class="kw2">class</span> InputIterator1, <span class="kw2">class</span> InputIterator2, <span class="kw2">class</span> BinaryPredicate <span class="sy1">&gt;</span>
<span class="kw4">bool</span> equal<span class="br0">&#40;</span> InputIterator1 first1, InputIterator1 last1,
            InputIterator2 first2, BinaryPredicate p <span class="br0">&#41;</span><span class="sy4">;</span></pre>
<p>
Returns <code>true</code> if the elements are the same in two ranges: one defined by <code>[first1, last1)</code> and another starting at <code>first2</code>. One version of the function uses <code>operator==</code> to compare the elements, another uses the given binary predicate <code>p</code>.
</p>

</div>
<!-- EDIT1 SECTION "equal" [1-655] -->
<h3 class="sectionedit2"><a name="parameters" id="parameters">Parameters</a></h3>
<div class="level3">

<p>

<code>first1</code>, <code>last1</code> - the first range of the elements to be compared
</p>

<p>
<code>first2</code> - beginning of the second range of the elements to be compared
</p>

<p>
<code>p</code> - binary predicate which returns <code>true</code> if the elements should be treated as equal
</p>

</div>
<!-- EDIT2 SECTION "Parameters" [656-914] -->
<h3 class="sectionedit3"><a name="return_value" id="return_value">Return value</a></h3>
<div class="level3">

<p>

<code>true</code> if the elements in the two ranges are equal
</p>

</div>
<!-- EDIT3 SECTION "Return value" [915-990] -->
<h3 class="sectionedit4"><a name="equivalent_function" id="equivalent_function">Equivalent function</a></h3>
<div class="level3">

<p>

First version:

</p>
<pre class="cpp code cpp"><span class="kw2">template</span><span class="sy1">&lt;</span><span class="kw2">class</span> InputIterator1, <span class="kw2">class</span> InputIterator2<span class="sy1">&gt;</span>
<span class="kw4">bool</span> equal<span class="br0">&#40;</span>InputIterator1 first1, InputIterator1 last1,
           InputIterator2 first2<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
    <span class="kw1">for</span> <span class="br0">&#40;</span><span class="sy4">;</span> first1 <span class="sy3">!</span><span class="sy1">=</span> last1<span class="sy4">;</span> <span class="sy2">++</span>first1, <span class="sy2">++</span>first2<span class="br0">&#41;</span> <span class="br0">&#123;</span>
        <span class="kw1">if</span> <span class="br0">&#40;</span><span class="sy3">!</span><span class="br0">&#40;</span><span class="sy2">*</span>first1 <span class="sy1">==</span> <span class="sy2">*</span>first2<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
            <span class="kw1">return</span> <span class="kw2">false</span><span class="sy4">;</span>
        <span class="br0">&#125;</span>
    <span class="br0">&#125;</span>
    <span class="kw1">return</span> <span class="kw2">true</span><span class="sy4">;</span>
<span class="br0">&#125;</span></pre>
<p>
Second version:

</p>
<pre class="cpp code cpp"><span class="kw2">template</span><span class="sy1">&lt;</span><span class="kw2">class</span> InputIterator1, <span class="kw2">class</span> InputIterator2, <span class="kw2">class</span> BinaryPredicate<span class="sy1">&gt;</span>
<span class="kw4">bool</span> equal<span class="br0">&#40;</span>InputIterator1 first1, InputIterator1 last1,
           InputIterator2 first2, BinaryPredicate p<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
    <span class="kw1">for</span> <span class="br0">&#40;</span><span class="sy4">;</span> first1 <span class="sy3">!</span><span class="sy1">=</span> last1<span class="sy4">;</span> <span class="sy2">++</span>first1, <span class="sy2">++</span>first2<span class="br0">&#41;</span> <span class="br0">&#123;</span>
        <span class="kw1">if</span> <span class="br0">&#40;</span><span class="sy3">!</span>p<span class="br0">&#40;</span><span class="sy2">*</span>first1, <span class="sy2">*</span>first2<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
            <span class="kw1">return</span> <span class="kw2">false</span><span class="sy4">;</span>
        <span class="br0">&#125;</span>
    <span class="br0">&#125;</span>
    <span class="kw1">return</span> <span class="kw2">true</span><span class="sy4">;</span>
<span class="br0">&#125;</span></pre>
</div>
<!-- EDIT4 SECTION "Equivalent function" [991-1711] -->
<h3 class="sectionedit5"><a name="example" id="example">Example</a></h3>
<div class="level3">

<p>

The following code uses <code>equal</code> to compare two vectors of integers:
</p>
<pre class="cpp code cpp">std<span class="sy4">::</span><span class="me2">vector</span><span class="sy1">&lt;</span><span class="kw4">int</span><span class="sy1">&gt;</span> v1<span class="sy4">;</span>
<span class="kw1">for</span> <span class="br0">&#40;</span><span class="kw4">int</span> i <span class="sy1">=</span> <span class="nu0">0</span><span class="sy4">;</span> i <span class="sy1">&lt;</span> <span class="nu0">10</span><span class="sy4">;</span> i<span class="sy2">++</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
    v1.<span class="me1">push_back</span><span class="br0">&#40;</span>i<span class="br0">&#41;</span><span class="sy4">;</span>
<span class="br0">&#125;</span>
&nbsp;
std<span class="sy4">::</span><span class="me2">vector</span><span class="sy1">&lt;</span><span class="kw4">int</span><span class="sy1">&gt;</span> v2<span class="sy4">;</span>
<span class="kw1">for</span> <span class="br0">&#40;</span><span class="kw4">int</span> i <span class="sy1">=</span> <span class="nu0">0</span><span class="sy4">;</span> i <span class="sy1">&lt;</span> <span class="nu0">10</span><span class="sy4">;</span> i<span class="sy2">++</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
    v2.<span class="me1">push_back</span><span class="br0">&#40;</span>i<span class="br0">&#41;</span><span class="sy4">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw1">if</span> <span class="br0">&#40;</span>std<span class="sy4">::</span><span class="me2">equal</span><span class="br0">&#40;</span>v1.<span class="me1">begin</span><span class="br0">&#40;</span><span class="br0">&#41;</span>, v1.<span class="me1">end</span><span class="br0">&#40;</span><span class="br0">&#41;</span>, v2.<span class="me1">begin</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
    std<span class="sy4">::</span><span class="kw3">cout</span> <span class="sy1">&lt;&lt;</span> <span class="st0">&quot;equal&quot;</span><span class="sy4">;</span>
<span class="br0">&#125;</span> <span class="kw1">else</span> <span class="br0">&#123;</span>
    std<span class="sy4">::</span><span class="kw3">cout</span> <span class="sy1">&lt;&lt;</span> <span class="st0">&quot;NOT equal&quot;</span><span class="sy4">;</span>
<span class="br0">&#125;</span></pre>
<p>
Output:

</p>
<pre class="code">
equal</pre>
</div>
<!-- EDIT5 SECTION "Example" [1712-2125] -->
<h3 class="sectionedit6"><a name="complexity" id="complexity">Complexity</a></h3>
<div class="level3">

<p>

linear in the distance between <code>first1</code> and <code>last1</code>
</p>

</div>
<!-- EDIT6 SECTION "Complexity" [2126-2202] -->
<h3 class="sectionedit7"><a name="see_also" id="see_also">See also</a></h3>
<div class="level3">

<p>

<a href="find_if" class="wikilink1" title="algorithm:find_if">find_if</a>, <a href="lexicographical_compare" class="wikilink1" title="algorithm:lexicographical_compare">lexicographical_compare</a>, <a href="mismatch" class="wikilink1" title="algorithm:mismatch">mismatch</a>, <a href="search" class="wikilink1" title="algorithm:search">search</a>
</p>

</div>
<!-- EDIT7 SECTION "See also" [2203-] --></div>
</body>
</html>
