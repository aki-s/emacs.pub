<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="de"
 lang="de" dir="ltr">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>de:preprocessor:pragma</title>
<meta name="generator" content="DokuWiki" />
<meta name="robots" content="index,follow" />
<meta name="date" content="2010-10-28T18:17:26-0700" />
<meta name="keywords" content="de,preprocessor,pragma" />
<link rel="search" type="application/opensearchdescription+xml" href="http://www.cppreference.com/wiki/lib/exe/opensearch.php" title="C++ Reference" />
<link rel="start" href="../../../index.html" />
<link rel="contents" href="http://www.cppreference.com/wiki/de/preprocessor/pragma?do=index" title="Übersicht" />
<link rel="alternate" type="application/rss+xml" title="Recent Changes" href="http://www.cppreference.com/wiki/feed.php" />
<link rel="alternate" type="application/rss+xml" title="Current Namespace" href="http://www.cppreference.com/wiki/feed.php?mode=list&amp;ns=de:preprocessor" />
<link rel="alternate" type="text/html" title="Plain HTML" href="http://www.cppreference.com/wiki/_export/xhtml/de/preprocessor/pragma" />
<link rel="alternate" type="text/plain" title="Wiki Markup" href="http://www.cppreference.com/wiki/_export/raw/de/preprocessor/pragma" />
<link rel="canonical" href="pragma" />
<link rel="stylesheet" media="screen" type="text/css" href="../../lib/exe/css.php@t=custom1&amp;tseed=1289693594" />
<link rel="stylesheet" media="all" type="text/css" href="../../lib/exe/css.php@s=all&amp;t=custom1&amp;tseed=1289693594" />
<link rel="stylesheet" media="print" type="text/css" href="../../lib/exe/css.php@s=print&amp;t=custom1&amp;tseed=1289693594" />
<script type="text/javascript" ><!--//--><![CDATA[//><!--
var NS='de:preprocessor';var JSINFO = {"id":"de:preprocessor:pragma","namespace":"de:preprocessor"};
//--><!]]></script>
<script type="text/javascript" charset="utf-8" src="../../lib/exe/js.php@tseed=1289693594" ></script>
</head>
<body>
<div class="dokuwiki export">

<h2 class="sectionedit1"><a name="pragma" id="pragma">#pragma</a></h2>
<div class="level2">
<pre class="cpp code cpp">    <span class="co2">#pragma Befehl</span></pre>
<p>
Der #pragma-Befehl ermöglicht es dem Programmierer, den Compiler zu bestimmten Aktionen anzuweisen. Da der #pragma-Befehl abhängig von der Implementierung ist, variieren seine Anwendungsmöglichkeiten je nach benutztem Compiler. Eine Möglichkeit wäre, den Programmablauf zu verfolgen.
</p>

<p>
#pragma kann z. B. benutzt werden, um eine Funktion aufzurufen, bevor die main-Funktion aufgerufen oder beendet wird.

</p>
<pre class="cpp code cpp"><span class="co2">#pragma startup f1() //Die Funktion muss void zurückgeben und darf keine Parameter haben.</span>
<span class="co2">#pragma exit f2()</span></pre>
<p>

Es folgen einige Compiler-Familien und die #pragma-Anweisungen, die zu diesem Compiler gehören.
</p>

</div>
<!-- EDIT1 SECTION "#pragma" [1-686] -->
<h3 class="sectionedit2"><a name="gnu_c_compiler_gcc_-_gnulinux_bsd_gnuhurd_gnudarwinmac_os_x_windows_mingw" id="gnu_c_compiler_gcc_-_gnulinux_bsd_gnuhurd_gnudarwinmac_os_x_windows_mingw">GNU C Compiler (GCC) - GNU/Linux, BSD, GNU/Hurd, GNU/Darwin/Mac OS X, Windows (MinGW)</a></h3>
<div class="level3">

</div>

<h4><a name="redefine_extname" id="redefine_extname">redefine_extname</a></h4>
<div class="level4">
<pre class="cpp code cpp">    <span class="co2">#pragma redefine_extname printf prnt</span></pre>
<p>

Gibt C-Funktionen ein anderes Symbol, wenn sie in Assemblersprache übersetzt werden.
</p>

</div>

<h4><a name="extern_prefix" id="extern_prefix">extern_prefix</a></h4>
<div class="level4">
<pre class="cpp code cpp">    <span class="co2">#pragma extern_prefix ext_ //Präfixe benutzen</span>
&nbsp;
    <span class="co1">//Externe Symbole mit dem Assembler-Präfix</span>
&nbsp;
    <span class="co2">#pragma extern_prefix //Präfixe nicht mehr benutzen</span></pre>
<p>

Stellt allen externen Assemblersymbolen den spezifizierten Präfix voran. Ein #pragma extern_prefix ohne Argumente beendet dies.
</p>

</div>

<h4><a name="pack" id="pack">pack</a></h4>
<div class="level4">
<pre class="cpp code cpp">    <span class="co2">#pragma pack(64) //optimiert alle folgenden Klassen, Unions und Strukturen für 64-bit-Code</span></pre>
<p>

Das Packen ist eine Optimierungsmethode, die die Members von Strukturen, Klassen und Unions an einem Vielfachen der Packgrenze ausrichtet. Das macht es für den Prozessor einfacher (und damit schneller), auf die Daten zuzugreifen, da sie an dem ausgerichtet wird, was der Prozessor normalerweise verarbeitet. Es kostet allerdings Speicher, da Speicherbereiche unnötigerweise unbenutzt bleiben. Die Zahl in Klammern muss eine Zweierpotenz (2, 4, 8, 16, 32, 64, …) sein.

</p>
<pre class="cpp code cpp"><span class="co2">#pragma pack() //ohne Argument</span></pre>
<p>

setzt die Packeinstellung auf den Compilerstandard zurück.
</p>

<p>

← Dies ist eine direkte Übersetzung des englischen Artikels, Stand 9.5.2010, 15:20 MESZ. Daher fehlen Informationen zu den vom Originalautor angegebenen Themen (s. u.). Wer möchte, kann diesen Artikel um besagte Dinge ergänzen und diese Notiz entfernen. Ich kenne mich dafür zu wenig mit #pragma aus. –yyyyyyy
</p>

<p>
← #pragma pack(push) and #pragma pack(pop) are on the way, I&#039;m still researching them and their functionality.
</p>

<p>
← This document is still under construction, I intend to continue adding compilers and their pragma options instead of leaving this largely blank. -GinoMan
</p>

</div>
<!-- EDIT2 SECTION "GNU C Compiler (GCC) - GNU/Linux, BSD, GNU/Hurd, GNU/Darwin/Mac OS X, Windows (MinGW)" [687-] --></div>
</body>
</html>
