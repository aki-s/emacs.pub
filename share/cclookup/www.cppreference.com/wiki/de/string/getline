<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="de"
 lang="de" dir="ltr">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>de:string:getline</title>
<meta name="generator" content="DokuWiki" />
<meta name="robots" content="index,follow" />
<meta name="date" content="2010-10-28T18:17:26-0700" />
<meta name="keywords" content="de,string,getline" />
<link rel="search" type="application/opensearchdescription+xml" href="http://www.cppreference.com/wiki/lib/exe/opensearch.php" title="C++ Reference" />
<link rel="start" href="../../../index.html" />
<link rel="contents" href="http://www.cppreference.com/wiki/de/string/getline?do=index" title="Übersicht" />
<link rel="alternate" type="application/rss+xml" title="Recent Changes" href="http://www.cppreference.com/wiki/feed.php" />
<link rel="alternate" type="application/rss+xml" title="Current Namespace" href="http://www.cppreference.com/wiki/feed.php?mode=list&amp;ns=de:string" />
<link rel="alternate" type="text/html" title="Plain HTML" href="http://www.cppreference.com/wiki/_export/xhtml/de/string/getline" />
<link rel="alternate" type="text/plain" title="Wiki Markup" href="http://www.cppreference.com/wiki/_export/raw/de/string/getline" />
<link rel="canonical" href="getline" />
<link rel="stylesheet" media="screen" type="text/css" href="../../lib/exe/css.php@t=custom1&amp;tseed=1289693594" />
<link rel="stylesheet" media="all" type="text/css" href="../../lib/exe/css.php@s=all&amp;t=custom1&amp;tseed=1289693594" />
<link rel="stylesheet" media="print" type="text/css" href="../../lib/exe/css.php@s=print&amp;t=custom1&amp;tseed=1289693594" />
<script type="text/javascript" ><!--//--><![CDATA[//><!--
var NS='de:string';var JSINFO = {"id":"de:string:getline","namespace":"de:string"};
//--><!]]></script>
<script type="text/javascript" charset="utf-8" src="../../lib/exe/js.php@tseed=1289693594" ></script>
</head>
<body>
<div class="dokuwiki export">

<h1 class="sectionedit1"><a name="getline" id="getline">getline</a></h1>
<div class="level1">

<p>

Syntax:
</p>
<pre class="code">  #include &lt;string&gt;
  istream&amp; std::getline( istream&amp; is, string&amp; s );
  istream&amp; std::getline( istream&amp; is, string&amp; s, Char delimiter );</pre>

<p>

Der C++ string header definiert die globale Funktion getline(), die Strings von einem I/O stream einliest. Die getline() Funktion, welche nicht Teil der String-Klasse ist, liest eine Zeile vom is und speichert sie in s.  Wenn ein character delimiter spezifiziert wird, dann wird getline() dem delimiter verwenden, um zu Entscheiden, wo das Einlesen der Daten beendet wird.  Andernfalls wird die zweite Variante wie folgt verwendet:
</p>

<p>
 return getline( is, s, is.widen( &#039;\n&#039; ) );
</p>

<p>
ACHTUNG: istream  ist der istream type basic_istream&lt;Char&gt; analog zum Buchstabentyp.
</p>

<p>
Der folgende Code liest zum Beispiel eine Textzeile aus stdin ein und übergibt sie zu stdout:

</p>
<pre class="code"> string s;
 getline( cin, s );
 cout &lt;&lt; &quot;You entered &quot; &lt;&lt; s &lt;&lt; endl;</pre>

<p>

Nachdem eine Datenzeile in einen string gegeben wurde, könnte man annehmen, dass stringstreams nüztlich bei der Datenextraktion aus dem string sein würden. So liest der folgende Code Zahlen aus dem standart input und ignoriert die kommentierten Zeilen die mit doppelten slashes anfangen:

</p>
<pre class="code">  // expects either space-delimited numbers or lines that start with
  // two forward slashes (//)
  string s;
  while( getline(cin,s) ) {
    if( s.size() &gt;= 2 &amp;&amp; s[0] == &#039;/&#039; &amp;&amp; s[1] == &#039;/&#039; ) {
      cout &lt;&lt; &quot;  ignoring comment: &quot; &lt;&lt; s &lt;&lt; endl;
    } else {
      istringstream ss(s);
      double d;
      while( ss &gt;&gt; d ) {
        cout &lt;&lt; &quot;  got a number: &quot; &lt;&lt; d &lt;&lt; endl;
      }
    }
  }</pre>

<p>

When run with a user supplying input, the above code might produce this output:

</p>
<pre class="code">  // test
    ignoring comment: // test
  23.3 -1 3.14159
    got a number: 23.3
    got a number: -1
    got a number: 3.14159
  // next batch
    ignoring comment: // next batch
  1 2 3 4 5
    got a number: 1
    got a number: 2
    got a number: 3
    got a number: 4
    got a number: 5
  50
    got a number: 50</pre>

<p>

Because the getline() function begins reading at the current file position, it can also be used to read the remainder of a line, or any characters up to the specified delimiter.
</p>

<p>
Related Topics: get, getline, stringstream
</p>

</div>
</div>
</body>
</html>
