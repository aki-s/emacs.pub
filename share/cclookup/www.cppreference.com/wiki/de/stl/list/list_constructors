<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="de"
 lang="de" dir="ltr">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>de:container:list:list_constructors</title>
<meta name="generator" content="DokuWiki" />
<meta name="robots" content="index,follow" />
<meta name="date" content="2010-10-28T18:17:26-0700" />
<meta name="keywords" content="de,container,list,list_constructors" />
<link rel="search" type="application/opensearchdescription+xml" href="http://www.cppreference.com/wiki/lib/exe/opensearch.php" title="C++ Reference" />
<link rel="start" href="../../../../index.html" />
<link rel="contents" href="http://www.cppreference.com/wiki/de/container/list/list_constructors?do=index" title="Übersicht" />
<link rel="alternate" type="application/rss+xml" title="Recent Changes" href="http://www.cppreference.com/wiki/feed.php" />
<link rel="alternate" type="application/rss+xml" title="Current Namespace" href="http://www.cppreference.com/wiki/feed.php?mode=list&amp;ns=de:container:list" />
<link rel="alternate" type="text/html" title="Plain HTML" href="http://www.cppreference.com/wiki/_export/xhtml/de/container/list/list_constructors" />
<link rel="alternate" type="text/plain" title="Wiki Markup" href="http://www.cppreference.com/wiki/_export/raw/de/container/list/list_constructors" />
<link rel="canonical" href="list_constructors" />
<link rel="stylesheet" media="screen" type="text/css" href="../../../lib/exe/css.php@t=custom1&amp;tseed=1289693594" />
<link rel="stylesheet" media="all" type="text/css" href="../../../lib/exe/css.php@s=all&amp;t=custom1&amp;tseed=1289693594" />
<link rel="stylesheet" media="print" type="text/css" href="../../../lib/exe/css.php@s=print&amp;t=custom1&amp;tseed=1289693594" />
<script type="text/javascript" ><!--//--><![CDATA[//><!--
var NS='de:container:list';var JSINFO = {"id":"de:container:list:list_constructors","namespace":"de:container:list"};
//--><!]]></script>
<script type="text/javascript" charset="utf-8" src="../../../lib/exe/js.php@tseed=1289693594" ></script>
</head>
<body>
<div class="dokuwiki export">

<h2 class="sectionedit1"><a name="list_constructors" id="list_constructors">List constructors</a></h2>
<div class="level2">

<p>
Syntax:
</p>
<pre class="cpp code cpp">    <span class="co2">#include &lt;list&gt;</span>
    list<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
    list<span class="br0">&#40;</span> <span class="kw4">const</span> list<span class="sy3">&amp;</span> c <span class="br0">&#41;</span><span class="sy4">;</span>
    <span class="kw2">explicit</span> list<span class="br0">&#40;</span> size_type num, <span class="kw4">const</span> T<span class="sy3">&amp;</span> val <span class="sy1">=</span> T<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
    list<span class="br0">&#40;</span> input_iterator start, input_iterator end <span class="br0">&#41;</span><span class="sy4">;</span>
    ~list<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span></pre>
<p>
Der Standardkonstruktor nimmt keine Argumente und erzeugt eine neue Instanz einer Liste.
</p>

<p>
Der zweite Konstruktor ist der standard copy constructor, welcher dazu benutzt werden kann,
 eine neue Liste zu erstellen, die eine Kopie einer gegebenen Liste <code>c</code> darstellt.
</p>

<p>
Der dritte Konstruktor erzeugt eine Liste mit <code>num</code> Elementen. Falls <code>val</code> angegeben ist, 
wird jedes Element mit diesem Wert initialisiert. Zum Beispiel erzeugt folgender 
Code eine Liste mit Fünf Kopien der Zahl 42:
</p>
<pre class="cpp code cpp">   list <span class="sy1">&lt;</span><span class="kw4">int</span><span class="sy1">&gt;</span> l1<span class="br0">&#40;</span> <span class="nu0">5</span>, <span class="nu0">42</span> <span class="br0">&#41;</span><span class="sy4">;</span></pre>
<p>
Der letzte Konstruktor erzeugt eine Liste, welche mit den Werten zwischen <code>start</code> und <code>end</code> Initialisiert wird. 
Zum Beispiel:
</p>
<pre class="cpp code cpp">   <span class="co1">// Erzeugt einen Vektor mit Zufalls Ganzzahlen zwischen 0 und 9</span>
   <span class="kw3">cout</span> <span class="sy1">&lt;&lt;</span> <span class="st0">&quot;Original Liste: &quot;</span><span class="sy4">;</span>
   list<span class="sy1">&lt;</span><span class="kw4">int</span><span class="sy1">&gt;</span> l<span class="sy4">;</span>
   <span class="kw1">for</span><span class="br0">&#40;</span> <span class="kw4">int</span> i <span class="sy1">=</span> <span class="nu0">0</span><span class="sy4">;</span> i <span class="sy1">&lt;</span> <span class="nu0">20</span><span class="sy4">;</span> i<span class="sy2">++</span> <span class="br0">&#41;</span> <span class="br0">&#123;</span>
     <span class="kw4">int</span> num <span class="sy1">=</span> <span class="br0">&#40;</span><span class="kw4">int</span><span class="br0">&#41;</span> <span class="kw3">rand</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy2">%</span> <span class="nu0">10</span><span class="sy4">;</span>
     <span class="kw3">cout</span> <span class="sy1">&lt;&lt;</span> num <span class="sy1">&lt;&lt;</span> <span class="st0">&quot; &quot;</span><span class="sy4">;</span>
     l.<span class="me1">push_back</span><span class="br0">&#40;</span> num <span class="br0">&#41;</span><span class="sy4">;</span>
   <span class="br0">&#125;</span>
   <span class="kw3">cout</span> <span class="sy1">&lt;&lt;</span> endl<span class="sy4">;</span>
&nbsp;
    <span class="co1">// entferne 5 &amp; 7</span>
   list<span class="sy1">&lt;</span><span class="kw4">int</span><span class="sy1">&gt;</span><span class="sy4">::</span><span class="me2">iterator</span> iter1 <span class="sy1">=</span> l.<span class="me1">begin</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
   <span class="kw1">while</span><span class="br0">&#40;</span> iter1 <span class="sy3">!</span><span class="sy1">=</span> l.<span class="me1">end</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#41;</span> <span class="br0">&#123;</span>
     list<span class="sy1">&lt;</span><span class="kw4">int</span><span class="sy1">&gt;</span><span class="sy4">::</span><span class="me2">iterator</span> thisone <span class="sy1">=</span> iter1<span class="sy4">;</span>
     <span class="sy2">++</span>iter1<span class="sy4">;</span>
     <span class="kw1">if</span> <span class="br0">&#40;</span> <span class="sy2">*</span>thisone <span class="sy1">==</span> <span class="nu0">5</span> <span class="sy3">||</span> <span class="sy2">*</span>thisone <span class="sy1">==</span> <span class="nu0">7</span> <span class="br0">&#41;</span> <span class="br0">&#123;</span>
        <span class="kw3">cout</span> <span class="sy1">&lt;&lt;</span> <span class="st0">&quot;entferne &quot;</span> <span class="sy1">&lt;&lt;</span> <span class="sy2">*</span>thisone <span class="sy1">&lt;&lt;</span> endl<span class="sy4">;</span>
        l.<span class="me1">erase</span><span class="br0">&#40;</span> thisone <span class="br0">&#41;</span><span class="sy4">;</span>
     <span class="br0">&#125;</span>
   <span class="br0">&#125;</span>
&nbsp;
    <span class="co1">// Finde das erste gerade Element von l</span>
   list<span class="sy1">&lt;</span><span class="kw4">int</span><span class="sy1">&gt;</span><span class="sy4">::</span><span class="me2">iterator</span> iter2 <span class="sy1">=</span> l.<span class="me1">begin</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
   <span class="kw1">while</span><span class="br0">&#40;</span> iter2 <span class="sy3">!</span><span class="sy1">=</span> l.<span class="me1">end</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy3">&amp;&amp;</span> <span class="sy2">*</span>iter2 <span class="sy2">%</span> <span class="nu0">2</span> <span class="sy3">!</span><span class="sy1">=</span> <span class="nu0">0</span> <span class="br0">&#41;</span> <span class="br0">&#123;</span>
     <span class="sy2">++</span>iter2<span class="sy4">;</span>
   <span class="br0">&#125;</span>
&nbsp;
   <span class="co1">// Finde das letzte gerade Element von l</span>
   list<span class="sy1">&lt;</span><span class="kw4">int</span><span class="sy1">&gt;</span><span class="sy4">::</span><span class="me2">iterator</span> iter3 <span class="sy1">=</span> l.<span class="me1">end</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
   <span class="kw1">do</span> <span class="br0">&#123;</span>
     <span class="sy2">--</span>iter3<span class="sy4">;</span>
   <span class="br0">&#125;</span> <span class="kw1">while</span><span class="br0">&#40;</span> iter3 <span class="sy3">!</span><span class="sy1">=</span> l.<span class="me1">begin</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy3">&amp;&amp;</span> <span class="sy2">*</span>iter3 <span class="sy2">%</span> <span class="nu0">2</span> <span class="sy3">!</span><span class="sy1">=</span> <span class="nu0">0</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&nbsp;
   <span class="kw3">cout</span> <span class="sy1">&lt;&lt;</span> <span class="st0">&quot;erste gerade Zahl: &quot;</span> <span class="sy1">&lt;&lt;</span> <span class="sy2">*</span>iter2 <span class="sy1">&lt;&lt;</span> <span class="st0">&quot;, letzte gerade Zahl: &quot;</span> <span class="sy1">&lt;&lt;</span> <span class="sy2">*</span>iter3 <span class="sy1">&lt;&lt;</span> endl<span class="sy4">;</span>
&nbsp;
   <span class="kw3">cout</span> <span class="sy1">&lt;&lt;</span> <span class="st0">&quot;neue Liste: &quot;</span><span class="sy4">;</span>
   list<span class="sy1">&lt;</span><span class="kw4">int</span><span class="sy1">&gt;</span> l2<span class="br0">&#40;</span> iter2, iter3 <span class="br0">&#41;</span><span class="sy4">;</span>
   list<span class="sy1">&lt;</span><span class="kw4">int</span><span class="sy1">&gt;</span><span class="sy4">::</span><span class="me2">iterator</span> iter4 <span class="sy1">=</span> l2.<span class="me1">begin</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
   <span class="kw1">while</span><span class="br0">&#40;</span> iter4 <span class="sy3">!</span><span class="sy1">=</span> l2.<span class="me1">end</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#41;</span> <span class="br0">&#123;</span>
     <span class="kw3">cout</span> <span class="sy1">&lt;&lt;</span> <span class="sy2">*</span>iter4 <span class="sy1">&lt;&lt;</span> <span class="st0">&quot; &quot;</span><span class="sy4">;</span>
     <span class="sy2">++</span>iter4<span class="sy4">;</span>
   <span class="br0">&#125;</span>
   <span class="kw3">cout</span> <span class="sy1">&lt;&lt;</span> endl<span class="sy4">;</span></pre>
<p>
Dieser Code produziert die folgende Ausgabe:
</p>
<pre class="code">
   Original Liste: 7 9 3 8 0 2 4 8 3 9 0 5 2 2 7 3 7 9 0 2
   entferne 7
   entferne 5
   entferne 7
   entferne 7
   erste gerade Zahl: 8, letzte gerade Zahl: 2
   neue Liste: 8 0 2 4 8 3 9 0 2 2 3 9 0</pre>
<p>
Der erste Konstruktor benötigt <a href="../../../complexity" class="wikilink1" title="complexity">constant time</a>, 
alle andere Konstruktoren laufen in <a href="../../../complexity" class="wikilink1" title="complexity">linear time</a> ab.
</p>

<p>
Bei Zerstörung der Liste wird der Standarddestruktor aufgerufen, welcher die Destruktoren jedes Elementes in der Liste mit linear complexity aufruft.

</p>

</div>
</div>
</body>
</html>
