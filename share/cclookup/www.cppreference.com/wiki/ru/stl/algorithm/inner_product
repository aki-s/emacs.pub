<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ru"
 lang="ru" dir="ltr">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>ru:algorithm:inner_product</title>
<meta name="generator" content="DokuWiki" />
<meta name="robots" content="index,follow" />
<meta name="date" content="2010-10-28T18:17:13-0700" />
<meta name="keywords" content="ru,algorithm,inner_product" />
<link rel="search" type="application/opensearchdescription+xml" href="http://www.cppreference.com/wiki/lib/exe/opensearch.php" title="C++ Reference" />
<link rel="start" href="../../../../index.html" />
<link rel="contents" href="http://www.cppreference.com/wiki/ru/algorithm/inner_product?do=index" title="Все страницы" />
<link rel="alternate" type="application/rss+xml" title="Recent Changes" href="http://www.cppreference.com/wiki/feed.php" />
<link rel="alternate" type="application/rss+xml" title="Current Namespace" href="http://www.cppreference.com/wiki/feed.php?mode=list&amp;ns=ru:algorithm" />
<link rel="alternate" type="text/html" title="Plain HTML" href="http://www.cppreference.com/wiki/_export/xhtml/ru/algorithm/inner_product" />
<link rel="alternate" type="text/plain" title="Wiki Markup" href="http://www.cppreference.com/wiki/_export/raw/ru/algorithm/inner_product" />
<link rel="canonical" href="inner_product" />
<link rel="stylesheet" media="screen" type="text/css" href="../../../lib/exe/css.php@t=custom1&amp;tseed=1289693594" />
<link rel="stylesheet" media="all" type="text/css" href="../../../lib/exe/css.php@s=all&amp;t=custom1&amp;tseed=1289693594" />
<link rel="stylesheet" media="print" type="text/css" href="../../../lib/exe/css.php@s=print&amp;t=custom1&amp;tseed=1289693594" />
<script type="text/javascript" ><!--//--><![CDATA[//><!--
var NS='ru:algorithm';var JSINFO = {"id":"ru:algorithm:inner_product","namespace":"ru:algorithm"};
//--><!]]></script>
<script type="text/javascript" charset="utf-8" src="../../../lib/exe/js.php@tseed=1289693594" ></script>
</head>
<body>
<div class="dokuwiki export">

<h2 class="sectionedit1"><a name="inner_product" id="inner_product">inner_product</a></h2>
<div class="level2">

<p>
Синтаксис:
</p>
<pre class="cpp code cpp">    <span class="co2">#include &lt;numeric&gt;</span>
    T inner_product<span class="br0">&#40;</span> input_iterator start1, input_iterator end1, input_iterator2 start2, T val <span class="br0">&#41;</span><span class="sy4">;</span>
    T inner_product<span class="br0">&#40;</span> input_iterator start1, input_iterator end1, input_iterator2 start2, T val, BinaryFunction f1, BinaryFunction2 f2 <span class="br0">&#41;</span><span class="sy4">;</span></pre>
<p>
Функция inner_product вычисляет внутренний продукт диапазона <code>[start1,end1)</code> и диапазона такого же размера, начинающегося с <code>start2</code>.
</p>

<p>
inner_product() действует за <a href="../../../complexity" class="wikilink1" title="complexity">линейное время</a>.
</p>

<p>
Например, следующий код показывает, как с помощью inner_product (альтернативный вариант - <a href="accumulate" class="wikilink1" title="ru:algorithm:accumulate">accumulate</a>) можно посчитать суммы площадей некоторых данных:
</p>
<pre class="cpp code cpp"><span class="co1">// Examples of std::accumulate and std::inner_product from wordaligned.org</span>
<span class="co2">#include &lt;functional&gt;</span>
<span class="co2">#include &lt;iostream&gt;</span>
<span class="co2">#include &lt;numeric&gt;</span>
<span class="co2">#include &lt;string&gt;</span>
<span class="co2">#include &lt;valarray&gt;</span>
<span class="co2">#include &lt;vector&gt;</span>
&nbsp;
<span class="kw4">typedef</span> std<span class="sy4">::</span><span class="me2">valarray</span><span class="sy1">&lt;</span><span class="kw4">double</span><span class="sy1">&gt;</span> xyz<span class="sy4">;</span>
&nbsp;
<span class="co1">// Xyz оператор вывода</span>
std<span class="sy4">::</span><span class="me2">ostream</span> <span class="sy3">&amp;</span> operator<span class="sy1">&lt;&lt;</span><span class="br0">&#40;</span>std<span class="sy4">::</span><span class="me2">ostream</span> <span class="sy3">&amp;</span> os, xyz <span class="kw4">const</span> <span class="sy3">&amp;</span> pt<span class="br0">&#41;</span> <span class="br0">&#123;</span>
    os <span class="sy1">&lt;&lt;</span> <span class="st0">'('</span><span class="sy4">;</span>
    <span class="kw4">char</span> <span class="kw4">const</span> <span class="sy2">*</span> sep <span class="sy1">=</span> <span class="st0">&quot;&quot;</span><span class="sy4">;</span>
    <span class="kw1">for</span><span class="br0">&#40;</span> <span class="kw4">size_t</span> i <span class="sy1">=</span> <span class="nu0">0</span><span class="sy4">;</span> i <span class="sy3">!</span><span class="sy1">=</span> pt.<span class="me1">size</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span> sep <span class="sy1">=</span> <span class="st0">&quot;, &quot;</span>, <span class="sy2">++</span>i <span class="br0">&#41;</span> <span class="br0">&#123;</span>
        os <span class="sy1">&lt;&lt;</span> sep <span class="sy1">&lt;&lt;</span> pt<span class="br0">&#91;</span>i<span class="br0">&#93;</span><span class="sy4">;</span>
    <span class="br0">&#125;</span>
    os <span class="sy1">&lt;&lt;</span> <span class="st0">')'</span><span class="sy4">;</span>
    <span class="kw1">return</span> os<span class="sy4">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="co1">// Битовая или обычная функция для использования в сокращении</span>
<span class="kw4">unsigned</span> bit_or<span class="br0">&#40;</span><span class="kw4">unsigned</span> u, <span class="kw4">unsigned</span> v<span class="br0">&#41;</span> <span class="br0">&#123;</span>
    <span class="kw1">return</span> u <span class="sy3">|</span> v<span class="sy4">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="co1">// Создание и возвращение треугольника</span>
std<span class="sy4">::</span><span class="me2">vector</span><span class="sy1">&lt;</span>xyz<span class="sy1">&gt;</span> create_triangle<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
    std<span class="sy4">::</span><span class="me2">vector</span><span class="sy1">&lt;</span>xyz<span class="sy1">&gt;</span> pts<span class="sy4">;</span>
    <span class="kw4">double</span> <span class="kw4">const</span> p<span class="br0">&#91;</span><span class="nu0">9</span><span class="br0">&#93;</span> <span class="sy1">=</span> <span class="br0">&#123;</span><span class="nu0">1</span>.,<span class="nu0">1</span>.,<span class="nu0">0</span>.,<span class="nu0">1</span>.,<span class="nu0">0</span>.,<span class="nu0">1</span>.,<span class="nu0">0</span>.,<span class="nu0">1</span>.,<span class="nu0">1</span>.<span class="br0">&#125;</span><span class="sy4">;</span>
    pts.<span class="me1">push_back</span><span class="br0">&#40;</span>xyz<span class="br0">&#40;</span>p <span class="sy2">+</span> <span class="nu0">0</span>, <span class="nu0">3</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy4">;</span>
    pts.<span class="me1">push_back</span><span class="br0">&#40;</span>xyz<span class="br0">&#40;</span>p <span class="sy2">+</span> <span class="nu0">3</span>, <span class="nu0">3</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy4">;</span>
    pts.<span class="me1">push_back</span><span class="br0">&#40;</span>xyz<span class="br0">&#40;</span>p <span class="sy2">+</span> <span class="nu0">6</span>, <span class="nu0">3</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy4">;</span>
    <span class="kw1">return</span> pts<span class="sy4">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="co1">// Задание нескольких тестовых массивов, накопление их и вывод результатов</span>
<span class="kw4">int</span> main<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
    <span class="kw4">int</span> <span class="kw4">const</span> a<span class="br0">&#91;</span><span class="nu0">3</span><span class="br0">&#93;</span> <span class="sy1">=</span> <span class="br0">&#123;</span> <span class="nu0">1</span>, <span class="nu0">2</span>, <span class="nu0">3</span> <span class="br0">&#125;</span><span class="sy4">;</span>
    <span class="kw4">int</span> <span class="kw4">const</span> b<span class="br0">&#91;</span><span class="nu0">3</span><span class="br0">&#93;</span> <span class="sy1">=</span> <span class="br0">&#123;</span> <span class="nu0">3</span>, <span class="nu0">2</span>, <span class="nu0">1</span> <span class="br0">&#125;</span><span class="sy4">;</span>
    std<span class="sy4">::</span><span class="me2">string</span> <span class="kw4">const</span> s<span class="br0">&#91;</span><span class="nu0">3</span><span class="br0">&#93;</span> <span class="sy1">=</span> <span class="br0">&#123;</span> <span class="st0">&quot;http://&quot;</span>, <span class="st0">&quot;wordaligned&quot;</span>, <span class="st0">&quot;.org&quot;</span> <span class="br0">&#125;</span><span class="sy4">;</span>
    <span class="kw4">bool</span> <span class="kw4">const</span> t<span class="br0">&#91;</span><span class="nu0">3</span><span class="br0">&#93;</span> <span class="sy1">=</span> <span class="br0">&#123;</span> <span class="kw2">false</span>, <span class="kw2">true</span>, <span class="kw2">false</span> <span class="br0">&#125;</span><span class="sy4">;</span>
    std<span class="sy4">::</span><span class="me2">vector</span><span class="sy1">&lt;</span>xyz<span class="sy1">&gt;</span> tri <span class="sy1">=</span> create_triangle<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
    <span class="kw4">unsigned</span> m<span class="br0">&#91;</span><span class="nu0">3</span><span class="br0">&#93;</span> <span class="sy1">=</span> <span class="br0">&#123;</span> <span class="nu0">1</span><span class="sy1">&lt;&lt;</span><span class="nu0">1</span>, <span class="nu0">1</span><span class="sy1">&lt;&lt;</span><span class="nu0">3</span>, <span class="nu0">1</span><span class="sy1">&lt;&lt;</span><span class="nu0">5</span> <span class="br0">&#125;</span><span class="sy4">;</span>
&nbsp;
    std<span class="sy4">::</span><span class="kw3">cout</span>
        <span class="sy1">&lt;&lt;</span> <span class="st0">&quot;sum(a) &quot;</span>
        <span class="sy1">&lt;&lt;</span> std<span class="sy4">::</span><span class="me2">accumulate</span><span class="br0">&#40;</span>a, a <span class="sy2">+</span> <span class="nu0">3</span>, <span class="nu0">0</span><span class="br0">&#41;</span>
        <span class="sy1">&lt;&lt;</span> <span class="st0">&quot;<span class="es1">\n</span>prod(a) &quot;</span>
        <span class="sy1">&lt;&lt;</span> std<span class="sy4">::</span><span class="me2">accumulate</span><span class="br0">&#40;</span>a, a <span class="sy2">+</span> <span class="nu0">3</span>, <span class="nu0">1</span>, std<span class="sy4">::</span><span class="me2">multiplies</span><span class="sy1">&lt;</span><span class="kw4">int</span><span class="sy1">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
        <span class="sy1">&lt;&lt;</span> <span class="st0">&quot;<span class="es1">\n</span>sum_sqs(a) &quot;</span>
        <span class="sy1">&lt;&lt;</span> std<span class="sy4">::</span><span class="me2">inner_product</span><span class="br0">&#40;</span>a, a <span class="sy2">+</span> <span class="nu0">3</span>, a, <span class="nu0">0</span><span class="br0">&#41;</span>
        <span class="sy1">&lt;&lt;</span> <span class="st0">&quot;<span class="es1">\n</span>dot(a, b) &quot;</span>
        <span class="sy1">&lt;&lt;</span> std<span class="sy4">::</span><span class="me2">inner_product</span><span class="br0">&#40;</span>a, a <span class="sy2">+</span> <span class="nu0">3</span>, b, <span class="nu0">0</span><span class="br0">&#41;</span>
        <span class="sy1">&lt;&lt;</span> <span class="st0">&quot;<span class="es1">\n</span>concat(s) &quot;</span>
        <span class="sy1">&lt;&lt;</span> std<span class="sy4">::</span><span class="me2">accumulate</span><span class="br0">&#40;</span>s, s <span class="sy2">+</span> <span class="nu0">3</span>, std<span class="sy4">::</span><span class="me2">string</span><span class="br0">&#40;</span><span class="st0">&quot;&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
        <span class="sy1">&lt;&lt;</span> <span class="st0">&quot;<span class="es1">\n</span>any(t) &quot;</span> <span class="sy1">&lt;&lt;</span> std<span class="sy4">::</span><span class="me2">boolalpha</span>
        <span class="sy1">&lt;&lt;</span> std<span class="sy4">::</span><span class="me2">accumulate</span><span class="br0">&#40;</span>t, t <span class="sy2">+</span> <span class="nu0">3</span>, <span class="kw2">false</span>, std<span class="sy4">::</span><span class="me2">logical_or</span><span class="sy1">&lt;</span><span class="kw4">bool</span><span class="sy1">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
        <span class="sy1">&lt;&lt;</span> <span class="st0">&quot;<span class="es1">\n</span>centroid(tri) &quot;</span>
        <span class="sy1">&lt;&lt;</span> std<span class="sy4">::</span><span class="me2">accumulate</span><span class="br0">&#40;</span>tri.<span class="me1">begin</span><span class="br0">&#40;</span><span class="br0">&#41;</span>, tri.<span class="me1">end</span><span class="br0">&#40;</span><span class="br0">&#41;</span>, xyz<span class="br0">&#40;</span><span class="nu0">0</span>., <span class="nu0">3</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="sy2">/</span> <span class="nu0">3</span>.
        <span class="sy1">&lt;&lt;</span> <span class="st0">&quot;<span class="es1">\n</span>bitor(m) &quot;</span> <span class="sy1">&lt;&lt;</span> std<span class="sy4">::</span><span class="me2">hex</span> <span class="sy1">&lt;&lt;</span> <span class="st0">&quot;0x&quot;</span>
        <span class="sy1">&lt;&lt;</span> std<span class="sy4">::</span><span class="me2">accumulate</span><span class="br0">&#40;</span>m, m <span class="sy2">+</span> <span class="nu0">3</span>, <span class="nu0">0</span>, bit_or<span class="br0">&#41;</span>
        <span class="sy1">&lt;&lt;</span> <span class="st0">'<span class="es1">\n</span>'</span><span class="sy4">;</span>
&nbsp;
    <span class="kw1">return</span> <span class="nu0">0</span><span class="sy4">;</span>
<span class="br0">&#125;</span></pre>
<p>
Этот код производит следующий вывод:
</p>
<pre class="code">
sum(a) 6
prod(a) 6
sum_sqs(a) 14
dot(a, b) 10
concat(s) http://wordaligned.org
any(t) true
centroid(tri) (0.666667, 0.666667, 0.666667)
bitor(m) 0x2a</pre>
<p>

Смотрите также: <a href="accumulate" class="wikilink1" title="ru:algorithm:accumulate">accumulate</a>, <a href="adjacent_difference" class="wikilink1" title="ru:algorithm:adjacent_difference">adjacent_difference</a>, <a href="count" class="wikilink1" title="ru:algorithm:count">count</a>, <a href="partial_sum" class="wikilink1" title="ru:algorithm:partial_sum">partial_sum</a>
</p>

</div>
<!-- EDIT1 SECTION "inner_product" [3-] --></div>
</body>
</html>
