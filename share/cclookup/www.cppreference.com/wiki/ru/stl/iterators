<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ru"
 lang="ru" dir="ltr">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>ru:iterator:start</title>
<meta name="generator" content="DokuWiki" />
<meta name="robots" content="index,follow" />
<meta name="date" content="2010-10-28T18:17:16-0700" />
<meta name="keywords" content="ru,iterator,start" />
<link rel="search" type="application/opensearchdescription+xml" href="http://www.cppreference.com/wiki/lib/exe/opensearch.php" title="C++ Reference" />
<link rel="start" href="../../../index.html" />
<link rel="contents" href="http://www.cppreference.com/wiki/ru/iterator/start?do=index" title="Все страницы" />
<link rel="alternate" type="application/rss+xml" title="Recent Changes" href="http://www.cppreference.com/wiki/feed.php" />
<link rel="alternate" type="application/rss+xml" title="Current Namespace" href="http://www.cppreference.com/wiki/feed.php?mode=list&amp;ns=ru:iterator" />
<link rel="alternate" type="text/html" title="Plain HTML" href="http://www.cppreference.com/wiki/_export/xhtml/ru/iterator/start" />
<link rel="alternate" type="text/plain" title="Wiki Markup" href="http://www.cppreference.com/wiki/_export/raw/ru/iterator/start" />
<link rel="canonical" href="iterators" />
<link rel="stylesheet" media="screen" type="text/css" href="../../lib/exe/css.php@t=custom1&amp;tseed=1289693594" />
<link rel="stylesheet" media="all" type="text/css" href="../../lib/exe/css.php@s=all&amp;t=custom1&amp;tseed=1289693594" />
<link rel="stylesheet" media="print" type="text/css" href="../../lib/exe/css.php@s=print&amp;t=custom1&amp;tseed=1289693594" />
<script type="text/javascript" ><!--//--><![CDATA[//><!--
var NS='ru:iterator';var JSINFO = {"id":"ru:iterator:start","namespace":"ru:iterator"};
//--><!]]></script>
<script type="text/javascript" charset="utf-8" src="../../lib/exe/js.php@tseed=1289693594" ></script>
</head>
<body>
<div class="dokuwiki export">

<h2 class="sectionedit1"><a name="итераторы_c" id="итераторы_c">Итераторы C++</a></h2>
<div class="level2">

<p>

Итераторы призваны предоставлять доступ к членам контейнеров, они могут быть
использованы способом, похожим на манипуляции указателями. Например, можно использовать
итератор для прохода по всем элементам вектора. Есть несколько разных типов итераторов:

</p>
<div class="table sectionedit2"><table class="inline">
	<tr class="row0">
		<th class="col0">Итератор</th><th class="col1">Описание</th>
	</tr>
	<tr class="row1">
		<td class="col0">input_iterator (для чтения)</td><td class="col1">Читают значения с движением вперед. Могут быть инкрементированы, сравнены и разыменованы.</td>
	</tr>
	<tr class="row2">
		<td class="col0">output_iterator (для записи)</td><td class="col1">Пишут значения с движением вперед. Могут быть инкрементированы и разыменованы.</td>
	</tr>
	<tr class="row3">
		<td class="col0">forward_iterator (однонаправленные)</td><td class="col1">Читают или пишут значения с движением вперед. Комбинируют функциональность предыдущих двух типов с возможностью сохранять значение итератора.</td>
	</tr>
	<tr class="row4">
		<td class="col0">bidirectional_iterator (двунаправленные)</td><td class="col1">Читают и пишут значения с движением вперед или назад. Похожи на однонаправленные, но их также можно инкрементировать и декрементировать.</td>
	</tr>
	<tr class="row5">
		<td class="col0">random_iterator (с произвольным доступом)</td><td class="col1">Читают и пишут значения с произвольным доступом. Самые мощные итераторы, сочетающие функциональность двунаправленных итераторов и возможность выполнения арифметики указателей и сравнений указателей.</td>
	</tr>
	<tr class="row6">
		<td class="col0">reverse_iterator (обратные)</td><td class="col1">Или итераторы с произвольным доступом, или двунаправленные, движущиеся в обратном направлении.</td>
	</tr>
</table></div>
<!-- EDIT2 TABLE [505-2212] -->
<p>

Каждый класс контейнеров связан с типом итератора, и каждый из <a href="algorithm/start" class="wikilink1" title="ru:stl:algorithm:start">алгоритмов STL</a> использует определенный тип итератора.
</p>

<p>
Например, <a href="../../stl/vector/start" class="wikilink1" title="stl:vector:start">векторы</a> связаны с итераторами с произвольным
доступом, значит, они могут использовать алгоритмы, требующие
произвольного доступа. Так как итераторы с произвольным доступом
включают в себя все свойства других итераторов, то векторы также
могут использовать алгоритмы, написанные для других итераторов.
</p>

<p>
Код в примере создает итератор и использует его в векторе:
</p>
<pre class="cpp code cpp">    vector<span class="sy1">&lt;</span><span class="kw4">int</span><span class="sy1">&gt;</span> the_vector<span class="sy4">;</span>
    vector<span class="sy1">&lt;</span><span class="kw4">int</span><span class="sy1">&gt;</span><span class="sy4">::</span><span class="me2">iterator</span> the_iterator<span class="sy4">;</span>
&nbsp;
    <span class="kw1">for</span><span class="br0">&#40;</span> <span class="kw4">int</span> i<span class="sy1">=</span><span class="nu0">0</span><span class="sy4">;</span> i <span class="sy1">&lt;</span> <span class="nu0">10</span><span class="sy4">;</span> i<span class="sy2">++</span> <span class="br0">&#41;</span> the_vector.<span class="me1">push_back</span><span class="br0">&#40;</span>i<span class="br0">&#41;</span><span class="sy4">;</span>
    <span class="kw4">int</span> total <span class="sy1">=</span> <span class="nu0">0</span><span class="sy4">;</span>
    the_iterator <span class="sy1">=</span> the_vector.<span class="me1">begin</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
    <span class="kw1">while</span><span class="br0">&#40;</span> the_iterator <span class="sy3">!</span><span class="sy1">=</span> the_vector.<span class="me1">end</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#41;</span> <span class="br0">&#123;</span>
      total <span class="sy2">+</span><span class="sy1">=</span> <span class="sy2">*</span>the_iterator<span class="sy4">;</span>
      <span class="sy2">++</span>the_iterator<span class="sy4">;</span>
    <span class="br0">&#125;</span>
&nbsp;
    <span class="kw3">cout</span> <span class="sy1">&lt;&lt;</span> <span class="st0">&quot;Итого=&quot;</span> <span class="sy1">&lt;&lt;</span> total <span class="sy1">&lt;&lt;</span> endl<span class="sy4">;</span></pre>
<p>
Заметьте, что можно получить доступ к элементам контейнера путем разыменования итератора.
</p>

</div>
<!-- EDIT1 SECTION "Итераторы C++" [1-3668] -->
<h3 class="sectionedit3"><a name="аннулирование_итераторов" id="аннулирование_итераторов">Аннулирование Итераторов</a></h3>
<div class="level3">

<p>
Итераторы для существующих элементов в контейнере может стать недействительным, при изменении контейнера. Это делает изменение контейнера при итерациях проблематичной. Контейнеры предлагают различные гарантии в этой связи:<br/>

vectors: вставка / удаление может аннулировать все итераторы.<br/>

list/map: удаление делает недействительными только итераторы на удаленный элемент(ы), но не на другие элементы.
</p>

<p>
Смотри также: <a href="http://www.oreillynet.com/pub/a/network/2005/10/18/what-is-iterator-in-c-plus-plus.html" class="urlextern" title="http://www.oreillynet.com/pub/a/network/2005/10/18/what-is-iterator-in-c-plus-plus.html"  rel="nofollow">http://www.oreillynet.com/pub/a/network/2005/10/18/what-is-iterator-in-c-plus-plus.html</a>

</p>

</div>
<!-- EDIT3 SECTION "Аннулирование Итераторов" [3669-] --></div>
</body>
</html>
