<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"
 lang="en" dir="ltr">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>typeinfo:start</title>
<meta name="generator" content="DokuWiki" />
<meta name="robots" content="index,follow" />
<meta name="date" content="2010-10-28T18:18:11-0700" />
<meta name="keywords" content="typeinfo,start" />
<link rel="search" type="application/opensearchdescription+xml" href="http://www.cppreference.com/wiki/lib/exe/opensearch.php" title="C++ Reference" />
<link rel="start" href="../../index.html" />
<link rel="contents" href="http://www.cppreference.com/wiki/typeinfo/start?do=index" title="Sitemap" />
<link rel="alternate" type="application/rss+xml" title="Recent Changes" href="http://www.cppreference.com/wiki/feed.php" />
<link rel="alternate" type="application/rss+xml" title="Current Namespace" href="http://www.cppreference.com/wiki/feed.php?mode=list&amp;ns=typeinfo" />
<link rel="alternate" type="text/html" title="Plain HTML" href="http://www.cppreference.com/wiki/_export/xhtml/typeinfo/start" />
<link rel="alternate" type="text/plain" title="Wiki Markup" href="http://www.cppreference.com/wiki/_export/raw/typeinfo/start" />
<link rel="canonical" href="start" />
<link rel="stylesheet" media="screen" type="text/css" href="../lib/exe/css.php@t=custom1&amp;tseed=1289693594" />
<link rel="stylesheet" media="all" type="text/css" href="../lib/exe/css.php@s=all&amp;t=custom1&amp;tseed=1289693594" />
<link rel="stylesheet" media="print" type="text/css" href="../lib/exe/css.php@s=print&amp;t=custom1&amp;tseed=1289693594" />
<script type="text/javascript" ><!--//--><![CDATA[//><!--
var NS='typeinfo';var JSINFO = {"id":"typeinfo:start","namespace":"typeinfo"};
//--><!]]></script>
<script type="text/javascript" charset="utf-8" src="../lib/exe/js.php@tseed=1289693594" ></script>
</head>
<body>
<div class="dokuwiki export">
<!-- TOC START -->
<div class="toc">
<div class="tocheader toctoggle" id="toc__header">Table of Contents</div>
<div id="toc__inside">

<ul class="toc">
<li class="clear">

<ul class="toc">
<li class="level2"><div class="li"><span class="li"><a href="start#typeinfo" class="toc">typeinfo</a></span></div>
<ul class="toc">
<li class="level3"><div class="li"><span class="li"><a href="start#type_info" class="toc">type_info</a></span></div></li>
<li class="level3"><div class="li"><span class="li"><a href="start#bad_cast" class="toc">bad_cast</a></span></div></li>
<li class="level3"><div class="li"><span class="li"><a href="start#bad_typeid" class="toc">bad_typeid</a></span></div></li></ul>
</li></ul>
</li></ul>
</div>
</div>
<!-- TOC END -->

<h2 class="sectionedit1"><a name="typeinfo" id="typeinfo">typeinfo</a></h2>
<div class="level2">

<p>
The <code>&lt;typeinfo&gt;</code> header provides class definitions used for run-time type information.

</p>

</div>
<!-- EDIT1 SECTION "typeinfo" [1-110] -->
<h3 class="sectionedit2"><a name="type_info" id="type_info">type_info</a></h3>
<div class="level3">
<pre class="cpp code cpp"><span class="kw2">class</span> type_info
<span class="br0">&#123;</span>
<span class="kw2">public</span><span class="sy4">:</span>
    <span class="kw2">virtual</span> ~type_info<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
    <span class="kw4">bool</span> operator<span class="sy1">==</span><span class="br0">&#40;</span><span class="kw4">const</span> type_info<span class="sy3">&amp;</span>  rhs <span class="br0">&#41;</span> <span class="kw4">const</span><span class="sy4">;</span>
    <span class="kw4">bool</span> operator<span class="sy3">!</span><span class="sy1">=</span><span class="br0">&#40;</span><span class="kw4">const</span> type_info<span class="sy3">&amp;</span>  rhs <span class="br0">&#41;</span> <span class="kw4">const</span><span class="sy4">;</span>
    <span class="kw4">bool</span> before<span class="br0">&#40;</span><span class="kw4">const</span> type_info<span class="sy3">&amp;</span>  rhs <span class="br0">&#41;</span> <span class="kw4">const</span><span class="sy4">;</span>
    <span class="kw4">const</span> <span class="kw4">char</span><span class="sy2">*</span> name<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="kw4">const</span><span class="sy4">;</span>
<span class="kw2">private</span><span class="sy4">:</span>
    type_info<span class="br0">&#40;</span><span class="kw4">const</span> type_info<span class="sy3">&amp;</span>  rhs <span class="br0">&#41;</span><span class="sy4">;</span>
    type_info<span class="sy3">&amp;</span> operator<span class="sy1">=</span><span class="br0">&#40;</span><span class="kw4">const</span> type_info<span class="sy3">&amp;</span>  rhs <span class="br0">&#41;</span><span class="sy4">;</span>
<span class="br0">&#125;</span><span class="sy4">;</span></pre>
<p>

Class type_info is the type of the object that is returned by the <a href="../keywords/typeid" class="wikilink1" title="keywords:typeid">typeid</a> expression. It provides implementation specific type information. The type name provided and collation sequence are implementation defined, and may vary between programs even when using the same compiler.
</p>

</div>
<!-- EDIT2 SECTION "type_info" [111-773] -->
<h3 class="sectionedit3"><a name="bad_cast" id="bad_cast">bad_cast</a></h3>
<div class="level3">
<pre class="cpp code cpp"><span class="kw2">class</span> bad_cast <span class="sy4">:</span> <span class="kw2">public</span> exception
<span class="br0">&#123;</span>
<span class="kw2">public</span><span class="sy4">:</span>
    bad_cast<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="kw1">throw</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
    bad_cast<span class="br0">&#40;</span><span class="kw4">const</span> bad_cast<span class="sy3">&amp;</span><span class="br0">&#41;</span> <span class="kw1">throw</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
    bad_cast<span class="sy3">&amp;</span> operator<span class="sy1">=</span><span class="br0">&#40;</span><span class="kw4">const</span> bad_cast<span class="sy3">&amp;</span><span class="br0">&#41;</span> <span class="kw1">throw</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
    <span class="kw2">virtual</span> ~bad_cast<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="kw1">throw</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
    <span class="kw2">virtual</span> <span class="kw4">const</span> <span class="kw4">char</span><span class="sy2">*</span> what<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="kw4">const</span> <span class="kw1">throw</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
<span class="br0">&#125;</span><span class="sy4">;</span></pre>
<p>

Class bad_cast is the type of the object that is thrown by an invalid <a href="../keywords/dynamic_cast" class="wikilink1" title="keywords:dynamic_cast">dynamic_cast</a> expression. The standard explicitly defines it will be thrown when a cast to a reference type fails.
</p>

</div>
<!-- EDIT3 SECTION "bad_cast" [774-1248] -->
<h3 class="sectionedit4"><a name="bad_typeid" id="bad_typeid">bad_typeid</a></h3>
<div class="level3">
<pre class="cpp code cpp"><span class="kw2">class</span> bad_typeid <span class="sy4">:</span> <span class="kw2">public</span> exception
<span class="br0">&#123;</span>
<span class="kw2">public</span><span class="sy4">:</span>
    bad_typeid<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="kw1">throw</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
    bad_typeid<span class="br0">&#40;</span><span class="kw4">const</span> bad_typeid<span class="sy3">&amp;</span><span class="br0">&#41;</span> <span class="kw1">throw</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
    bad_typeid<span class="sy3">&amp;</span> operator<span class="sy1">=</span><span class="br0">&#40;</span><span class="kw4">const</span> bad_typeid<span class="sy3">&amp;</span><span class="br0">&#41;</span> <span class="kw1">throw</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
    <span class="kw2">virtual</span> ~bad_typeid<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="kw1">throw</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
    <span class="kw2">virtual</span> <span class="kw4">const</span> <span class="kw4">char</span><span class="sy2">*</span> what<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="kw4">const</span> <span class="kw1">throw</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
<span class="br0">&#125;</span><span class="sy4">;</span></pre>
<p>

Class bad_typeid is the type of the object that is thrown if the argument in a <a href="../keywords/typeid" class="wikilink1" title="keywords:typeid">typeid</a> expression is null.

</p>

</div>
<!-- EDIT4 SECTION "bad_typeid" [1249-] --></div>
</body>
</html>
