<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="cn"
 lang="cn" dir="ltr">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>cn:iterator:start</title>
<meta name="generator" content="DokuWiki" />
<meta name="robots" content="index,follow" />
<meta name="date" content="2010-10-28T18:17:54-0700" />
<meta name="keywords" content="cn,iterator,start" />
<link rel="search" type="application/opensearchdescription+xml" href="http://www.cppreference.com/wiki/lib/exe/opensearch.php" title="C++ Reference" />
<link rel="start" href="../../../index.html" />
<link rel="contents" href="http://www.cppreference.com/wiki/cn/iterator/start?do=index" title="Sitemap" />
<link rel="alternate" type="application/rss+xml" title="Recent Changes" href="http://www.cppreference.com/wiki/feed.php" />
<link rel="alternate" type="application/rss+xml" title="Current Namespace" href="http://www.cppreference.com/wiki/feed.php?mode=list&amp;ns=cn:iterator" />
<link rel="alternate" type="text/html" title="Plain HTML" href="http://www.cppreference.com/wiki/_export/xhtml/cn/iterator/start" />
<link rel="alternate" type="text/plain" title="Wiki Markup" href="http://www.cppreference.com/wiki/_export/raw/cn/iterator/start" />
<link rel="canonical" href="iterators" />
<link rel="stylesheet" media="screen" type="text/css" href="../../lib/exe/css.php@t=custom1&amp;tseed=1289693594" />
<link rel="stylesheet" media="all" type="text/css" href="../../lib/exe/css.php@s=all&amp;t=custom1&amp;tseed=1289693594" />
<link rel="stylesheet" media="print" type="text/css" href="../../lib/exe/css.php@s=print&amp;t=custom1&amp;tseed=1289693594" />
<script type="text/javascript" ><!--//--><![CDATA[//><!--
var NS='cn:iterator';var JSINFO = {"id":"cn:iterator:start","namespace":"cn:iterator"};
//--><!]]></script>
<script type="text/javascript" charset="utf-8" src="../../lib/exe/js.php@tseed=1289693594" ></script>
</head>
<body>
<div class="dokuwiki export">
<!-- TOC START -->
<div class="toc">
<div class="tocheader toctoggle" id="toc__header">Table of Contents</div>
<div id="toc__inside">

<ul class="toc">
<li class="clear">

<ul class="toc">
<li class="level2"><div class="li"><span class="li"><a href="iterators#c_迭代器_iterators" class="toc">C++ 迭代器（Iterators）</a></span></div>
<ul class="toc">
<li class="level3"><div class="li"><span class="li"><a href="iterators#迭代器类型_iterator_categories" class="toc">迭代器类型（Iterator Categories）</a></span></div></li>
<li class="level3"><div class="li"><span class="li"><a href="iterators#辅助迭代器函数" class="toc">辅助迭代器函数</a></span></div></li>
<li class="level3"><div class="li"><span class="li"><a href="iterators#失效迭代器_invalidating_iterators" class="toc">失效迭代器（Invalidating Iterators）</a></span></div></li></ul>
</li></ul>
</li></ul>
</div>
</div>
<!-- TOC END -->

<h2 class="sectionedit1"><a name="c_迭代器_iterators" id="c_迭代器_iterators">C++ 迭代器（Iterators）</a></h2>
<div class="level2">

<p>

迭代器用于存取(access)一个序列(sequence)中的元素，其用法类似于指针。例如，我们可以用迭代器遍历一个向量（vector）的所有元素。
</p>

<p>
下列代码建立并使用与一个向量关联的迭代器：
</p>
<pre class="cpp code cpp">    vector<span class="sy1">&lt;</span><span class="kw4">int</span><span class="sy1">&gt;</span> the_vector<span class="sy4">;</span>
    vector<span class="sy1">&lt;</span><span class="kw4">int</span><span class="sy1">&gt;</span><span class="sy4">::</span><span class="me2">iterator</span> the_iterator<span class="sy4">;</span>
&nbsp;
&nbsp;
    <span class="kw1">for</span><span class="br0">&#40;</span> <span class="kw4">int</span> i<span class="sy1">=</span><span class="nu0">0</span><span class="sy4">;</span> i <span class="sy1">&lt;</span> <span class="nu0">10</span><span class="sy4">;</span> i<span class="sy2">++</span> <span class="br0">&#41;</span> the_vector.<span class="me1">push_back</span><span class="br0">&#40;</span>i<span class="br0">&#41;</span><span class="sy4">;</span>
    <span class="kw4">int</span> total <span class="sy1">=</span> <span class="nu0">0</span><span class="sy4">;</span>
    the_iterator <span class="sy1">=</span> the_vector.<span class="me1">begin</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
    <span class="kw1">while</span><span class="br0">&#40;</span> the_iterator <span class="sy3">!</span><span class="sy1">=</span> the_vector.<span class="me1">end</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#41;</span> <span class="br0">&#123;</span>
      total <span class="sy2">+</span><span class="sy1">=</span> <span class="sy2">*</span>the_iterator<span class="sy4">;</span>
      <span class="sy2">++</span>the_iterator<span class="sy4">;</span>
    <span class="br0">&#125;</span>
&nbsp;
    <span class="kw3">cout</span> <span class="sy1">&lt;&lt;</span> <span class="st0">&quot;Total=&quot;</span> <span class="sy1">&lt;&lt;</span> total <span class="sy1">&lt;&lt;</span> endl<span class="sy4">;</span></pre>
<p>
注意，我们可以通过解除迭代器引用（dereferencing， 即运算&#039;*&#039;）存取容器的所有元素。
</p>

<p>
注：如果不想使用过去值，最好使用先增运算符(<code>++iter</code>)，不使用后增运算符 (<code>iter++</code>)<br/>

后增运算符通常是如下实现的：
</p>
<pre class="cpp code cpp">  Iter operator<span class="sy2">++</span><span class="br0">&#40;</span><span class="kw4">int</span><span class="br0">&#41;</span>
  <span class="br0">&#123;</span>
    Iter tmp<span class="br0">&#40;</span><span class="sy2">*</span><span class="kw3">this</span><span class="br0">&#41;</span><span class="sy4">;</span> <span class="co1">// store the old value in a temporary object</span>
    <span class="sy2">++*</span><span class="kw3">this</span><span class="sy4">;</span>         <span class="co1">// call pre-increment</span>
    <span class="kw1">return</span> tmp<span class="sy4">;</span>      <span class="co1">// return the old value</span>
  <span class="br0">&#125;</span></pre>
<p>
显然，后增运算符效率不及先增运算符。
</p>

<p>
<br/>

</p>

</div>
<!-- EDIT1 SECTION "C++ 迭代器（Iterators）" [1-1170] -->
<h3 class="sectionedit2"><a name="迭代器类型_iterator_categories" id="迭代器类型_iterator_categories">迭代器类型（Iterator Categories）</a></h3>
<div class="level3">

<p>
不同类型的迭代器功能也不一。读和写就需要使用不同的功能。<br/>

随机存取对于一个”vector”既高效的又方便的，但是，对于”list”是代价高的。<br/>

为此，根据其功能，迭代器被分为五类：
</p>
<div class="table sectionedit3"><table class="inline">
	<tr class="row0">
		<th class="col0">迭代器类型</th><th class="col1">描述</th><th class="col2">提供者</th><th class="col3">标签Tag</th>
	</tr>
	<tr class="row1">
		<td class="col0">输入(Input)</td><td class="col1">通过前移操作读取数据。 这种迭代器可以前移，可以比较，也可以解除引用。</td><td class="col2">istream</td><td class="col3">input_iterator_tag</td>
	</tr>
	<tr class="row2">
		<td class="col0">输出(Output)</td><td class="col1">通过前移动作写入数据。 这种迭代器可以前移，也可以解除引用。</td><td class="col2">ostream, inserter</td><td class="col3">output_iterator_tag</td>
	</tr>
	<tr class="row3">
		<td class="col0">前向(Forward)</td><td class="col1">通过前移操作读写数据。结合了输入迭代器和输出迭代器的功能，能够存储迭代器的值。</td><td class="col2"> slist</td><td class="col3">forward_iterator_tag</td>
	</tr>
	<tr class="row4">
		<td class="col0">双向(Bidirectional)</td><td class="col1">通过前移操作和后移操作读写数据。这些迭代器类似于前向迭代器，但是，可以对其进行前移或者后移。</td><td class="col2">list, map, multimap, set, multiset</td><td class="col3">bidirectional_iterator_tag</td>
	</tr>
	<tr class="row5">
		<td class="col0">随机存取(Random-access)</td><td class="col1">随机读写数据，是功能最强的迭代器，结合了双向迭代器的功能，能够进行指针算术运算和指针比较运算。</td><td class="col2">array, deque, string, vector</td><td class="col3">random_access_iterator_tag</td>
	</tr>
</table></div>
<!-- EDIT3 TABLE [1465-2417] -->
<p>

每个STL容器都关联一类迭代器，每个<a href="algorithm/start" class="wikilink1" title="cn:stl:algorithm:start">STL 算法</a>均使用一定类型的迭代器。
</p>

<p>

例如，<a href="vector/start" class="wikilink1" title="cn:stl:vector:start">向量</a> 的关联迭代器是随机迭代器，也就是说，向量可以使用需要随机迭代器的算法。因为随机迭代器具有其他类型迭代器的功能，所以，向量也可以使用为其他迭代器设计的算法。
</p>
<pre class="cpp code cpp">    vector<span class="sy1">&lt;</span><span class="kw4">int</span><span class="sy1">&gt;</span> the_vector<span class="br0">&#40;</span><span class="nu0">10</span><span class="br0">&#41;</span><span class="sy4">;</span>
&nbsp;
    <span class="co1">// generate_n requires output_iterator</span>
    generate_n<span class="br0">&#40;</span>the_vector.<span class="me1">begin</span><span class="br0">&#40;</span><span class="br0">&#41;</span>, <span class="nu0">5</span>, <span class="kw3">rand</span><span class="br0">&#41;</span><span class="sy4">;</span>
&nbsp;
    <span class="co1">// fill requires forward_iterator</span>
    fill<span class="br0">&#40;</span>the_vector.<span class="me1">begin</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy2">+</span><span class="nu0">5</span>, the_vector.<span class="me1">end</span><span class="br0">&#40;</span><span class="br0">&#41;</span>, <span class="nu0">100</span><span class="br0">&#41;</span><span class="sy4">;</span>
&nbsp;
    <span class="co1">// random_shuffle requires random_access_iterator</span>
    random_shuffle<span class="br0">&#40;</span>the_vector.<span class="me1">begin</span><span class="br0">&#40;</span><span class="br0">&#41;</span>, the_vector.<span class="me1">end</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy4">;</span>
&nbsp;
    <span class="co1">// copy requires input_iterator</span>
    copy<span class="br0">&#40;</span>the_vector.<span class="me1">begin</span><span class="br0">&#40;</span><span class="br0">&#41;</span>, the_vector.<span class="me1">end</span><span class="br0">&#40;</span><span class="br0">&#41;</span>, ostream_iterator<span class="sy1">&lt;</span><span class="kw4">int</span><span class="sy1">&gt;</span><span class="br0">&#40;</span><span class="kw3">cout</span>, <span class="st0">&quot; &quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy4">;</span>
&nbsp;
    <span class="co1">// reverse_copy requires bidirectional_iterator</span>
    reverse_copy<span class="br0">&#40;</span>the_vector.<span class="me1">begin</span><span class="br0">&#40;</span><span class="br0">&#41;</span>, the_vector.<span class="me1">end</span><span class="br0">&#40;</span><span class="br0">&#41;</span>, ostream_iterator<span class="sy1">&lt;</span><span class="kw4">int</span><span class="sy1">&gt;</span><span class="br0">&#40;</span><span class="kw3">cout</span>, <span class="st0">&quot; &quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy4">;</span></pre>
<p>

<br/>

</p>

</div>
<!-- EDIT2 SECTION "迭代器类型（Iterator Categories）" [1171-3420] -->
<h3 class="sectionedit4"><a name="辅助迭代器函数" id="辅助迭代器函数">辅助迭代器函数</a></h3>
<div class="level3">

<p>

头文件 <code>&lt;iterator&gt;</code> 定义了两个辅助函数。

</p>
<pre class="cpp code cpp">  <span class="kw4">void</span> advance<span class="br0">&#40;</span> input_iterator<span class="sy3">&amp;</span> pos, Dist n <span class="br0">&#41;</span><span class="sy4">;</span></pre>
<p>

<code>advance()</code> 令 <code>pos</code> 前进（或后退） <code>n</code>个元素。 <br/>

对于bidirectional和random_access_iterators，<code>n</code> 可以是表示后退的负数。<br/>

对于random_access_iterators, <code>advance()</code> 的执行时间是常数(只是调用<code>pos</code>+=<code>n</code>).<br/>

对于其他的迭代器， <code>advance()</code> 的执行时间是线性的(需要调用calls <code>++pos</code> <code>n</code> 次).
</p>
<pre class="cpp code cpp">  <span class="kw2">typename</span> iterator_traits<span class="sy1">&lt;</span>input_iterator<span class="sy1">&gt;</span><span class="sy4">::</span><span class="me2">difference_type</span>
  distance<span class="br0">&#40;</span> input_iterator pos1, input_iterator pos2 <span class="br0">&#41;</span><span class="sy4">;</span></pre>
<p>

<code>distance()</code> 返回两个迭代器之间的距离。<br/>

对于random_access_iterators, <code>distance()</code> 的运行时间是常数 (只是返回 <code>pos2</code> - <code>pos1</code>).<br/>

对于其他迭代器, <code>distance()</code> 的运行时间是线性的( 前移<code>pos1</code> 直至到达<code>pos2</code>, 然后返回前移操作次数).
</p>

</div>
<!-- EDIT4 SECTION "辅助迭代器函数" [3421-4378] -->
<h3 class="sectionedit5"><a name="失效迭代器_invalidating_iterators" id="失效迭代器_invalidating_iterators">失效迭代器（Invalidating Iterators）</a></h3>
<div class="level3">

<p>

当一个容器变化时，指向该容器中元素的迭代器可能失效。这使得在迭代器变化期间改变容器容易出现问题。在这方面，不同的容器提供不同的保障：<br/>

</p>
<ul>
<li class="level1"><div class="li"> vectors: 引起内存重新分配的插入运算使所有迭代器失效，插入也使得插入位置及其后位置的迭代器失效，删除运算使得删除位置及其后位置的迭代器失效.<br/>
</div>
</li>
<li class="level1"><div class="li"> list/map: 插入不会使得任何迭代器失效；删除运算使指向删除位置的迭代器失效，但是不会失效其他迭代器.<br/>
</div>
</li>
</ul>

<p>

<br/>

<br/>

Related topics: <a href="http://www.oreillynet.com/pub/a/network/2005/10/18/what-is-iterator-in-c-plus-plus.html" class="urlextern" title="http://www.oreillynet.com/pub/a/network/2005/10/18/what-is-iterator-in-c-plus-plus.html"  rel="nofollow">http://www.oreillynet.com/pub/a/network/2005/10/18/what-is-iterator-in-c-plus-plus.html</a>

</p>

</div>
<!-- EDIT5 SECTION "失效迭代器（Invalidating Iterators）" [4379-] --></div>
</body>
</html>
