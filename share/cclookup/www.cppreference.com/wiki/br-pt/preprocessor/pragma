<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="br-pt"
 lang="br-pt" dir="ltr">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>br-pt:preprocessor:pragma</title>
<meta name="generator" content="DokuWiki" />
<meta name="robots" content="index,follow" />
<meta name="date" content="2010-10-28T18:18:03-0700" />
<meta name="keywords" content="br-pt,preprocessor,pragma" />
<link rel="search" type="application/opensearchdescription+xml" href="http://www.cppreference.com/wiki/lib/exe/opensearch.php" title="C++ Reference" />
<link rel="start" href="../../../index.html" />
<link rel="contents" href="http://www.cppreference.com/wiki/br-pt/preprocessor/pragma?do=index" title="Sitemap" />
<link rel="alternate" type="application/rss+xml" title="Recent Changes" href="http://www.cppreference.com/wiki/feed.php" />
<link rel="alternate" type="application/rss+xml" title="Current Namespace" href="http://www.cppreference.com/wiki/feed.php?mode=list&amp;ns=br-pt:preprocessor" />
<link rel="alternate" type="text/html" title="Plain HTML" href="http://www.cppreference.com/wiki/_export/xhtml/br-pt/preprocessor/pragma" />
<link rel="alternate" type="text/plain" title="Wiki Markup" href="http://www.cppreference.com/wiki/_export/raw/br-pt/preprocessor/pragma" />
<link rel="canonical" href="pragma" />
<link rel="stylesheet" media="screen" type="text/css" href="../../lib/exe/css.php@t=custom1&amp;tseed=1289693594" />
<link rel="stylesheet" media="all" type="text/css" href="../../lib/exe/css.php@s=all&amp;t=custom1&amp;tseed=1289693594" />
<link rel="stylesheet" media="print" type="text/css" href="../../lib/exe/css.php@s=print&amp;t=custom1&amp;tseed=1289693594" />
<script type="text/javascript" ><!--//--><![CDATA[//><!--
var NS='br-pt:preprocessor';var JSINFO = {"id":"br-pt:preprocessor:pragma","namespace":"br-pt:preprocessor"};
//--><!]]></script>
<script type="text/javascript" charset="utf-8" src="../../lib/exe/js.php@tseed=1289693594" ></script>
</head>
<body>
<div class="dokuwiki export">

<h2 class="sectionedit1"><a name="pragma" id="pragma">#pragma</a></h2>
<div class="level2">
<pre class="cpp code cpp">    <span class="co2">#pragma lexems</span></pre>
<p>
O comando #pragma permite que o programador diga ao compilador para fazer certas coisas. Uma vez que o comando #pragma é específico da implementação, os seus usos variam de compilador para compilador. Uma opção possível é traçar a execução do programa.
</p>

<p>
Abaixo estão algumas famílias de compiladores, o sistema operativo no qual eles são encontrados e as directivas pragma que são parte dessa implementação.
</p>

<p>
Além disso, pragma é usado para permitir que o programador invoque uma função antes de main ser invocada ou depois de main terminar.

</p>
<pre class="cpp code cpp"><span class="co2">#pragma startup fun() //A função deve ter void como tipo de retorno e zero parâmetros.</span>
<span class="co2">#pragma exit fun1()</span></pre>
</div>
<!-- EDIT1 SECTION "#pragma" [1-743] -->
<h3 class="sectionedit2"><a name="gnu_c_compiler_gcc_-_gnulinux_bsd_gnuhurd_gnudarwinmac_os_x_windows_mingw" id="gnu_c_compiler_gcc_-_gnulinux_bsd_gnuhurd_gnudarwinmac_os_x_windows_mingw">GNU C Compiler (GCC) - GNU/Linux, BSD, GNU/Hurd, GNU/Darwin/Mac OS X, Windows (MinGW)</a></h3>
<div class="level3">

</div>

<h4><a name="redefine_extname" id="redefine_extname">redefine_extname</a></h4>
<div class="level4">
<pre class="cpp code cpp">    <span class="co2">#pragma redefine_extname printf prnt</span></pre>
<p>

Dá às funções de C um diferente símbolo definido pelo programador quando traduzido para linguagem assembly.
</p>

</div>

<h4><a name="extern_prefix" id="extern_prefix">extern_prefix</a></h4>
<div class="level4">
<pre class="cpp code cpp">    <span class="co2">#pragma extern_prefix ext_ // começar prefixação</span>
    <span class="co1">// símbolos externos com o prefixo assembly aqui</span>
    <span class="co2">#pragma extern_prefix // acabar prefixação</span></pre>
<p>

Prefixa todos os símbolos de assembly de funções externas com o prefixo string.
Outro #pragma extern_prefix acabará a prefixação de funções externas.
</p>

</div>

<h4><a name="pack" id="pack">pack</a></h4>
<div class="level4">
<pre class="cpp code cpp">    <span class="co2">#pragma pack(64) // optimizar todas as subsequentes classes, uniões (union), e estruturas (struct) para código de 64 bits</span></pre>
<p>

Packing é um método de optimização que faz com que os membros de estruturas, classes e uniões se alinhem a um factor da fronteira de packing. Isto normalmente torna mais fácil (logo mais rápido) para o processador para aceder a dados uma vez que está packed para alinhar com o que o processador está habituado a lidar, contudo gasta memória por ter “lixo” inserido para alinhar o código com o pack. O valor numérico entre parênteses tem de ser um factor de 2 (2, 4, 8, 16, 32, 64….). Há outras maneiras de usar “pack” e elas estão descritas abaixo mas acima é o método mais simples e mais comum.
Pode usar 

</p>
<pre class="cpp code cpp"><span class="co2">#pragma pack() /* com parênteses vazios */</span></pre>
<p>

para definir o packing para o default do compilador.
</p>

<p>

← #pragma pack(push) e #pragma pack(pop) estão a caminho, ainda estou a pesquisá-los a eles e à sua funcionalidade. -/&gt;
← Este documento ainda está em construção, pretendo continuar a adicionar compiladores e as suas opções pragma em vez de deixar este enorme branco. -GinoMan -/&gt; 
</p>

<p>
← #pragma pack(push) and #pragma pack(pop) are on the way, I&#039;m still researching them and their functionality. -/&gt; ← This document is still under construction, I intend to continue adding compilers and their pragma options instead of leaving this largely blank. -GinoMan -/&gt;

</p>

</div>
<!-- EDIT2 SECTION "GNU C Compiler (GCC) - GNU/Linux, BSD, GNU/Hurd, GNU/Darwin/Mac OS X, Windows (MinGW)" [744-] --></div>
</body>
</html>
