<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="jp"
 lang="jp" dir="ltr">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>jp:keywords:virtual</title>
<meta name="generator" content="DokuWiki" />
<meta name="robots" content="index,follow" />
<meta name="date" content="2010-10-28T18:17:20-0700" />
<meta name="keywords" content="jp,keywords,virtual" />
<link rel="search" type="application/opensearchdescription+xml" href="http://www.cppreference.com/wiki/lib/exe/opensearch.php" title="C++ Reference" />
<link rel="start" href="../../../index.html" />
<link rel="contents" href="http://www.cppreference.com/wiki/jp/keywords/virtual?do=index" title="Sitemap" />
<link rel="alternate" type="application/rss+xml" title="Recent Changes" href="http://www.cppreference.com/wiki/feed.php" />
<link rel="alternate" type="application/rss+xml" title="Current Namespace" href="http://www.cppreference.com/wiki/feed.php?mode=list&amp;ns=jp:keywords" />
<link rel="alternate" type="text/html" title="Plain HTML" href="http://www.cppreference.com/wiki/_export/xhtml/jp/keywords/virtual" />
<link rel="alternate" type="text/plain" title="Wiki Markup" href="http://www.cppreference.com/wiki/_export/raw/jp/keywords/virtual" />
<link rel="canonical" href="virtual" />
<link rel="stylesheet" media="screen" type="text/css" href="../../lib/exe/css.php@t=custom1&amp;tseed=1289693594" />
<link rel="stylesheet" media="all" type="text/css" href="../../lib/exe/css.php@s=all&amp;t=custom1&amp;tseed=1289693594" />
<link rel="stylesheet" media="print" type="text/css" href="../../lib/exe/css.php@s=print&amp;t=custom1&amp;tseed=1289693594" />
<script type="text/javascript" ><!--//--><![CDATA[//><!--
var NS='jp:keywords';var JSINFO = {"id":"jp:keywords:virtual","namespace":"jp:keywords"};
//--><!]]></script>
<script type="text/javascript" charset="utf-8" src="../../lib/exe/js.php@tseed=1289693594" ></script>
</head>
<body>
<div class="dokuwiki export">

<h2 class="sectionedit1"><a name="virtual" id="virtual">virtual</a></h2>
<div class="level2">

<p>

文法:

</p>
<pre class="cpp code cpp">    <span class="kw2">virtual</span> 返り値の型 名前<span class="br0">&#40;</span> 引数リスト <span class="br0">&#41;</span><span class="sy4">;</span>
    <span class="kw2">virtual</span> 返り値の型 名前<span class="br0">&#40;</span> 引数リスト <span class="br0">&#41;</span> <span class="sy1">=</span> <span class="nu0">0</span><span class="sy4">;</span></pre>
<p>
virtualキーワードは仮想関数を作成するために使用します。仮想関数は派生クラスでオーバーライドすることが可能です。

</p>
<ul>
<li class="level1"><div class="li"> 仮想関数はサブクラスでオーバーライドすることが可能であるということを表します。オーバーライドすると、新しく定義された関数が利用されます。</div>
</li>
<li class="level1"><div class="li"> もしもベースクラスのポインタが、派生クラスのオブジェクトを指していたとすると、その派生クラスがオーバーライドされた関数を定義していた場合には、その新しい関数が使用されます。</div>
</li>
<li class="level1"><div class="li"> ベースオブジェクトはさまざまな異なる仮想関数を実行するために、いろいろな派生オブジェクトを指すことができます。</div>
</li>
</ul>

<p>

もしも関数が純粋仮想関数(後ろに = 0が付きます)として定義されている場合には、派生クラスで上書きしなければなりません。
</p>

<p>
例えば、以下のコードは子クラスがどのようにして親の仮想メソッドをオーバーライドするのか、というのを表現しています。また、仮想関数ではないメソッドがオーバーライドできないというのも示しています:
</p>
<pre class="cpp code cpp">  <span class="kw2">class</span> Base <span class="br0">&#123;</span>
  <span class="kw2">public</span><span class="sy4">:</span>
   <span class="kw4">void</span> nonVirtualFunc<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
     <span class="kw3">cout</span> <span class="sy1">&lt;&lt;</span> <span class="st0">&quot;親: 非仮想関数&quot;</span> <span class="sy1">&lt;&lt;</span> endl<span class="sy4">;</span>
   <span class="br0">&#125;</span>
   <span class="kw2">virtual</span> <span class="kw4">void</span> virtualFunc<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
     <span class="kw3">cout</span> <span class="sy1">&lt;&lt;</span> <span class="st0">&quot;親: 仮想関数&quot;</span> <span class="sy1">&lt;&lt;</span> endl<span class="sy4">;</span>
   <span class="br0">&#125;</span>
  <span class="br0">&#125;</span><span class="sy4">;</span>
&nbsp;
  <span class="kw2">class</span> Child <span class="sy4">:</span> <span class="kw2">public</span> Base <span class="br0">&#123;</span>
  <span class="kw2">public</span><span class="sy4">:</span>
   <span class="kw4">void</span> nonVirtualFunc<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
     <span class="kw3">cout</span> <span class="sy1">&lt;&lt;</span> <span class="st0">&quot;子: 非仮想関数&quot;</span> <span class="sy1">&lt;&lt;</span> endl<span class="sy4">;</span>
   <span class="br0">&#125;</span>
   <span class="kw4">void</span> virtualFunc<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
     <span class="kw3">cout</span> <span class="sy1">&lt;&lt;</span> <span class="st0">&quot;子: 仮想関数&quot;</span> <span class="sy1">&lt;&lt;</span> endl<span class="sy4">;</span>
   <span class="br0">&#125;</span>
  <span class="br0">&#125;</span><span class="sy4">;</span>
&nbsp;
  <span class="kw4">int</span> main<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
   Base<span class="sy2">*</span> basePointer <span class="sy1">=</span> <span class="kw3">new</span> Child<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
   basePointer<span class="sy2">-</span><span class="sy1">&gt;</span>nonVirtualFunc<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
   basePointer<span class="sy2">-</span><span class="sy1">&gt;</span>virtualFunc<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
   <span class="kw1">return</span> <span class="nu0">0</span><span class="sy4">;</span>
  <span class="br0">&#125;</span></pre>
<p>
このコードを実行すると、以下の結果が表示されます:
</p>
<pre class="code">
  親: 非仮想関数
  子: 仮想関数</pre>
<p>
関連トピック: <a href="class" class="wikilink1" title="jp:keywords:class">class</a>
</p>

</div>
</div>
</body>
</html>
