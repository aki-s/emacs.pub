<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="jp"
 lang="jp" dir="ltr">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>jp:container:vector:vector_constructors</title>
<meta name="generator" content="DokuWiki" />
<meta name="robots" content="index,follow" />
<meta name="date" content="2010-10-28T18:17:23-0700" />
<meta name="keywords" content="jp,container,vector,vector_constructors" />
<link rel="search" type="application/opensearchdescription+xml" href="http://www.cppreference.com/wiki/lib/exe/opensearch.php" title="C++ Reference" />
<link rel="start" href="../../../../index.html" />
<link rel="contents" href="http://www.cppreference.com/wiki/jp/container/vector/vector_constructors?do=index" title="Sitemap" />
<link rel="alternate" type="application/rss+xml" title="Recent Changes" href="http://www.cppreference.com/wiki/feed.php" />
<link rel="alternate" type="application/rss+xml" title="Current Namespace" href="http://www.cppreference.com/wiki/feed.php?mode=list&amp;ns=jp:container:vector" />
<link rel="alternate" type="text/html" title="Plain HTML" href="http://www.cppreference.com/wiki/_export/xhtml/jp/container/vector/vector_constructors" />
<link rel="alternate" type="text/plain" title="Wiki Markup" href="http://www.cppreference.com/wiki/_export/raw/jp/container/vector/vector_constructors" />
<link rel="canonical" href="vector_constructors" />
<link rel="stylesheet" media="screen" type="text/css" href="../../../lib/exe/css.php@t=custom1&amp;tseed=1289693594" />
<link rel="stylesheet" media="all" type="text/css" href="../../../lib/exe/css.php@s=all&amp;t=custom1&amp;tseed=1289693594" />
<link rel="stylesheet" media="print" type="text/css" href="../../../lib/exe/css.php@s=print&amp;t=custom1&amp;tseed=1289693594" />
<script type="text/javascript" ><!--//--><![CDATA[//><!--
var NS='jp:container:vector';var JSINFO = {"id":"jp:container:vector:vector_constructors","namespace":"jp:container:vector"};
//--><!]]></script>
<script type="text/javascript" charset="utf-8" src="../../../lib/exe/js.php@tseed=1289693594" ></script>
</head>
<body>
<div class="dokuwiki export">

<h2 class="sectionedit1"><a name="ベクタコンストラクタ" id="ベクタコンストラクタ">ベクタコンストラクタ</a></h2>
<div class="level2">

<p>
文法:
</p>
<pre class="cpp code cpp">    <span class="co2">#include &lt;vector&gt;</span>
    <span class="kw2">using</span> <span class="kw2">namespace</span> std<span class="sy4">;</span>
    vector<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
    vector<span class="br0">&#40;</span> <span class="kw4">const</span> vector<span class="sy3">&amp;</span> c <span class="br0">&#41;</span><span class="sy4">;</span>
    <span class="kw2">explicit</span> vector<span class="br0">&#40;</span> size_type num, <span class="kw4">const</span> T<span class="sy3">&amp;</span> val <span class="sy1">=</span> T<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
    <span class="kw2">template</span><span class="sy1">&lt;</span> <span class="kw2">typename</span> input_iterator <span class="sy1">&gt;</span>
    vector<span class="br0">&#40;</span> input_iterator start, input_iterator end <span class="br0">&#41;</span><span class="sy4">;</span>
    ~vector<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span></pre>
<p>
デフォルトのベクタコンストラクタは引数を取らず、そのベクタの新しいインスタンスを生成します。
</p>

<p>
二番目のコンストラクタはデフォルトのコピーコンストラクタで、与えられたベクタ<code>c</code>のコピーを生成します。
</p>

<p>
三番目のコンストラクタは<code>num</code>個のオブジェクトを持つベクタを生成します。<code>val</code>が与えられた場合、それぞれのオブジェクトはその値で初期化され、それ以外の場合それらのオブジェクトは<code>T</code>のデフォルトコンストラクタで初期化されます。例えば、次のコードは整数42の5つのコピーを持つベクタを作ります：

</p>
<pre class="cpp code cpp">   vector<span class="sy1">&lt;</span><span class="kw4">int</span><span class="sy1">&gt;</span> v1<span class="br0">&#40;</span> <span class="nu0">5</span>, <span class="nu0">42</span> <span class="br0">&#41;</span><span class="sy4">;</span></pre>
<p>
最後のコンストラクタは<code>start</code>と<code>end</code>の間の要素を持つように初期化されたベクタを生成します。例えば:
</p>
<pre class="cpp code cpp">   <span class="co1">// ランダムな整数のベクタを生成</span>
   <span class="kw3">cout</span> <span class="sy1">&lt;&lt;</span> <span class="st0">&quot;元のベクタ: &quot;</span><span class="sy4">;</span>
   vector<span class="sy1">&lt;</span><span class="kw4">int</span><span class="sy1">&gt;</span> v<span class="sy4">;</span>
   <span class="kw1">for</span><span class="br0">&#40;</span> <span class="kw4">int</span> i <span class="sy1">=</span> <span class="nu0">0</span><span class="sy4">;</span> i <span class="sy1">&lt;</span> <span class="nu0">10</span><span class="sy4">;</span> <span class="sy2">++</span>i <span class="br0">&#41;</span> <span class="br0">&#123;</span>
     <span class="kw4">int</span> num <span class="sy1">=</span> <span class="br0">&#40;</span><span class="kw4">int</span><span class="br0">&#41;</span> <span class="kw3">rand</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy2">%</span> <span class="nu0">10</span><span class="sy4">;</span>
     <span class="kw3">cout</span> <span class="sy1">&lt;&lt;</span> num <span class="sy1">&lt;&lt;</span> <span class="st0">&quot; &quot;</span><span class="sy4">;</span>
     v.<span class="me1">push_back</span><span class="br0">&#40;</span> num <span class="br0">&#41;</span><span class="sy4">;</span>
   <span class="br0">&#125;</span>
   <span class="kw3">cout</span> <span class="sy1">&lt;&lt;</span> endl<span class="sy4">;</span>
&nbsp;
   <span class="co1">// vの最初の偶数要素を探す</span>
   vector<span class="sy1">&lt;</span><span class="kw4">int</span><span class="sy1">&gt;</span><span class="sy4">::</span><span class="me2">iterator</span> iter1 <span class="sy1">=</span> v.<span class="me1">begin</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
   <span class="kw1">while</span><span class="br0">&#40;</span> iter1 <span class="sy3">!</span><span class="sy1">=</span> v.<span class="me1">end</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy3">&amp;&amp;</span> <span class="sy2">*</span>iter1 <span class="sy2">%</span> <span class="nu0">2</span> <span class="sy3">!</span><span class="sy1">=</span> <span class="nu0">0</span> <span class="br0">&#41;</span> <span class="br0">&#123;</span>
     <span class="sy2">++</span>iter1<span class="sy4">;</span>
   <span class="br0">&#125;</span>
&nbsp;
   <span class="co1">// vの最後の偶数要素を探す</span>
   vector<span class="sy1">&lt;</span><span class="kw4">int</span><span class="sy1">&gt;</span><span class="sy4">::</span><span class="me2">iterator</span> iter2 <span class="sy1">=</span> v.<span class="me1">end</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
   <span class="kw1">do</span> <span class="br0">&#123;</span>
     <span class="sy2">--</span>iter2<span class="sy4">;</span>
   <span class="br0">&#125;</span> <span class="kw1">while</span><span class="br0">&#40;</span> iter2 <span class="sy3">!</span><span class="sy1">=</span> v.<span class="me1">begin</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy3">&amp;&amp;</span> <span class="sy2">*</span>iter2 <span class="sy2">%</span> <span class="nu0">2</span> <span class="sy3">!</span><span class="sy1">=</span> <span class="nu0">0</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&nbsp;
   <span class="co1">// 両方の数が見つかった場合のみ実行</span>
   <span class="kw1">if</span><span class="br0">&#40;</span> iter1 <span class="sy3">!</span><span class="sy1">=</span> v.<span class="me1">end</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy3">&amp;&amp;</span> iter2 <span class="sy3">!</span><span class="sy1">=</span> v.<span class="me1">begin</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#41;</span> <span class="br0">&#123;</span>
     <span class="kw3">cout</span> <span class="sy1">&lt;&lt;</span> <span class="st0">&quot;最初の偶数: &quot;</span> <span class="sy1">&lt;&lt;</span> <span class="sy2">*</span>iter1 <span class="sy1">&lt;&lt;</span> <span class="st0">&quot;, 最後の偶数: &quot;</span> <span class="sy1">&lt;&lt;</span> <span class="sy2">*</span>iter2 <span class="sy1">&lt;&lt;</span> endl<span class="sy4">;</span>
&nbsp;
     <span class="kw3">cout</span> <span class="sy1">&lt;&lt;</span> <span class="st0">&quot;新しいベクタ: &quot;</span><span class="sy4">;</span>
     vector<span class="sy1">&lt;</span><span class="kw4">int</span><span class="sy1">&gt;</span> v2<span class="br0">&#40;</span> iter1, iter2 <span class="br0">&#41;</span><span class="sy4">;</span>
     <span class="kw1">for</span><span class="br0">&#40;</span> <span class="kw4">int</span> i <span class="sy1">=</span> <span class="nu0">0</span><span class="sy4">;</span> i <span class="sy1">&lt;</span> v2.<span class="me1">size</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span> <span class="sy2">++</span>i <span class="br0">&#41;</span> <span class="br0">&#123;</span>
       <span class="kw3">cout</span> <span class="sy1">&lt;&lt;</span> v2<span class="br0">&#91;</span>i<span class="br0">&#93;</span> <span class="sy1">&lt;&lt;</span> <span class="st0">&quot; &quot;</span><span class="sy4">;</span>
     <span class="br0">&#125;</span>
     <span class="kw3">cout</span> <span class="sy1">&lt;&lt;</span> endl<span class="sy4">;</span>
   <span class="br0">&#125;</span></pre>
<p>
このコードを動作させると、次の結果が表示されます:
</p>
<pre class="code">
   元のベクタ: 1 9 7 9 2 7 2 1 9 8
   最初の偶数: 2, 最後の偶数: 8
   新しいベクタ: 2 7 2 1 9</pre>
<p>
最後のコンストラクタはSTLベクタを古いスタイルの配列のデータで初期化する手軽な方法を提供してくれます。
</p>

<p>
例:
</p>
<pre class="cpp code cpp">    <span class="kw4">float</span> fp_values<span class="br0">&#91;</span><span class="br0">&#93;</span> <span class="sy1">=</span> <span class="br0">&#123;</span> <span class="nu16">0.1</span>, <span class="nu16">0.2</span> , <span class="nu16">0.3</span>, <span class="nu16">0.4</span><span class="br0">&#125;</span><span class="sy4">;</span>      <span class="co1">// どこかで配列が作られました</span>
...
    <span class="me1">vector</span><span class="sy1">&lt;</span><span class="kw4">float</span><span class="sy1">&gt;</span> fp_vector<span class="br0">&#40;</span>fp_values,fp_values<span class="sy2">+</span><span class="nu0">4</span><span class="br0">&#41;</span><span class="sy4">;</span> <span class="co1">// 配列の中の要素はfp_vectorにコピーされました</span></pre>
<p>
ポインタはイテレータの可能な単純な形であるだけということを心に留めておいてください。
</p>

<p>
これら全てのコンストラクタは<a href="../../../complexity" class="wikilink1" title="complexity">constant time</a>で走る最初のものを除いて<a href="../../../complexity" class="wikilink1" title="complexity">linear time</a>で走ります。
</p>

<p>
ベクタが破壊されるとき、デフォルトデストラクタがそれぞれの要素について呼ばれます。
</p>

</div>
</div>
</body>
</html>
