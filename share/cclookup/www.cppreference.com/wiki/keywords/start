<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"
 lang="en" dir="ltr">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>keywords:start</title>
<meta name="generator" content="DokuWiki" />
<meta name="robots" content="index,follow" />
<meta name="date" content="2010-11-11T13:55:00-0800" />
<meta name="keywords" content="keywords,start" />
<link rel="search" type="application/opensearchdescription+xml" href="http://www.cppreference.com/wiki/lib/exe/opensearch.php" title="C++ Reference" />
<link rel="start" href="../../index.html" />
<link rel="contents" href="http://www.cppreference.com/wiki/keywords/start?do=index" title="Sitemap" />
<link rel="alternate" type="application/rss+xml" title="Recent Changes" href="http://www.cppreference.com/wiki/feed.php" />
<link rel="alternate" type="application/rss+xml" title="Current Namespace" href="http://www.cppreference.com/wiki/feed.php?mode=list&amp;ns=keywords" />
<link rel="alternate" type="text/html" title="Plain HTML" href="http://www.cppreference.com/wiki/_export/xhtml/keywords/start" />
<link rel="alternate" type="text/plain" title="Wiki Markup" href="http://www.cppreference.com/wiki/_export/raw/keywords/start" />
<link rel="canonical" href="start" />
<link rel="stylesheet" media="screen" type="text/css" href="../lib/exe/css.php@t=custom1&amp;tseed=1289693594" />
<link rel="stylesheet" media="all" type="text/css" href="../lib/exe/css.php@s=all&amp;t=custom1&amp;tseed=1289693594" />
<link rel="stylesheet" media="print" type="text/css" href="../lib/exe/css.php@s=print&amp;t=custom1&amp;tseed=1289693594" />
<script type="text/javascript" ><!--//--><![CDATA[//><!--
var NS='keywords';var JSINFO = {"id":"keywords:start","namespace":"keywords"};
//--><!]]></script>
<script type="text/javascript" charset="utf-8" src="../lib/exe/js.php@tseed=1289693594" ></script>
</head>
<body>
<div class="dokuwiki export">

<h1 class="sectionedit1"><a name="c_keywords" id="c_keywords">C++ Keywords</a></h1>
<div class="level1">

<p>

This is a list of reserved keywords in C++.  Since they are used by the language, these keywords are not
available for re-definition (or overloading) by programmers.
</p>

</div>

<h5><a name="flow_control" id="flow_control">Flow control</a></h5>
<div class="level5">
<div class="table sectionedit2"><table class="inline">
	<tr class="row0">
		<td class="col0"><a href="break" class="wikilink1" title="keywords:break">break</a></td><td class="col1">break out of a loop</td>
	</tr>
	<tr class="row1">
		<td class="col0"><a href="case" class="wikilink1" title="keywords:case">case</a></td><td class="col1">in switch statement, defines a value label</td>
	</tr>
	<tr class="row2">
		<td class="col0"><a href="else" class="wikilink1" title="keywords:else">else</a></td><td class="col1">alternate case for an if statement</td>
	</tr>
	<tr class="row3">
		<td class="col0"><a href="goto" class="wikilink1" title="keywords:goto">goto</a></td><td class="col1">jump to a label (within the same function)</td>
	</tr>
	<tr class="row4">
		<td class="col0"><a href="if" class="wikilink1" title="keywords:if">if</a></td><td class="col1">execute code based on the result of a test</td>
	</tr>
	<tr class="row5">
		<td class="col0"><a href="for" class="wikilink1" title="keywords:for">for</a></td><td class="col1">looping construct</td>
	</tr>
	<tr class="row6">
		<td class="col0"><a href="do" class="wikilink1" title="keywords:do">do</a></td><td class="col1">begin of a &#039;do-while&#039; looping construct</td>
	</tr>
	<tr class="row7">
		<td class="col0"><a href="while" class="wikilink1" title="keywords:while">while</a></td><td class="col1">begin of &#039;while&#039; or end of &#039;do-while&#039; looping constructs</td>
	</tr>
	<tr class="row8">
		<td class="col0"><a href="continue" class="wikilink1" title="keywords:continue">continue</a></td><td class="col1">bypass iterations of a loop</td>
	</tr>
	<tr class="row9">
		<td class="col0"><a href="default" class="wikilink1" title="keywords:default">default</a></td><td class="col1">default handler in a case statement (in C++0x also force default implementation of a method)</td>
	</tr>
	<tr class="row10">
		<td class="col0"><a href="switch" class="wikilink1" title="keywords:switch">switch</a></td><td class="col1">execute code based on different possible values for a variable</td>
	</tr>
	<tr class="row11">
		<td class="col0"><a href="return" class="wikilink1" title="keywords:return">return</a></td><td class="col1">return from a function</td>
	</tr>
</table></div>
<!-- EDIT2 TABLE [220-865] -->
</div>

<h5><a name="language_support_functions" id="language_support_functions">Language support functions</a></h5>
<div class="level5">
<div class="table sectionedit3"><table class="inline">
	<tr class="row0">
		<td class="col0"><a href="const_cast" class="wikilink1" title="keywords:const_cast">const_cast</a></td><td class="col1">cast that only allows to strip &#039;const&#039; or &#039;volatile&#039; modifiers</td>
	</tr>
	<tr class="row1">
		<td class="col0"><a href="dynamic_cast" class="wikilink1" title="keywords:dynamic_cast">dynamic_cast</a></td><td class="col1">cast a pointer/reference from base (polymorphic) class to derived class, with runtime error reporting, if cast is not correct</td>
	</tr>
	<tr class="row2">
		<td class="col0"><a href="reinterpret_cast" class="wikilink1" title="keywords:reinterpret_cast">reinterpret_cast</a></td><td class="col1">cast between any pointers or any integer with no change, which does not strip const or volatile modifiers</td>
	</tr>
	<tr class="row3">
		<td class="col0"><a href="sizeof" class="wikilink1" title="keywords:sizeof">sizeof</a></td><td class="col1">return the size of a variable or type</td>
	</tr>
	<tr class="row4">
		<td class="col0"><a href="static_cast" class="wikilink1" title="keywords:static_cast">static_cast</a></td><td class="col1">cast that can be done implicitly in reverse, with changing the pointer for derived class, if required</td>
	</tr>
	<tr class="row5">
		<td class="col0"><a href="this" class="wikilink1" title="keywords:this">this</a></td><td class="col1">a pointer to the current object inside a class&#039;s method</td>
	</tr>
</table></div>
<!-- EDIT3 TABLE [899-1490] -->
</div>

<h5><a name="predefined_operators" id="predefined_operators">Predefined operators</a></h5>
<div class="level5">
<div class="table sectionedit4"><table class="inline">
	<tr class="row0">
		<td class="col0"><a href="../alternative_operators" class="wikilink1" title="alternative_operators">and</a></td><td class="col1">alternative to &amp;&amp; operator</td>
	</tr>
	<tr class="row1">
		<td class="col0"><a href="../alternative_operators" class="wikilink1" title="alternative_operators">and_eq</a></td><td class="col1">alternative to &amp;= operator</td>
	</tr>
	<tr class="row2">
		<td class="col0"><a href="../alternative_operators" class="wikilink1" title="alternative_operators">bitand</a></td><td class="col1">alternative to bitwise &amp; operator</td>
	</tr>
	<tr class="row3">
		<td class="col0"><a href="../alternative_operators" class="wikilink1" title="alternative_operators">bitor</a></td><td class="col1">alternative to | operator</td>
	</tr>
	<tr class="row4">
		<td class="col0"><a href="../alternative_operators" class="wikilink1" title="alternative_operators">compl</a></td><td class="col1">alternative to ~ operator</td>
	</tr>
	<tr class="row5">
		<td class="col0"><a href="../alternative_operators" class="wikilink1" title="alternative_operators">not</a></td><td class="col1">alternative to ! operator</td>
	</tr>
	<tr class="row6">
		<td class="col0"><a href="../alternative_operators" class="wikilink1" title="alternative_operators">not_eq</a></td><td class="col1">alternative to != operator</td>
	</tr>
	<tr class="row7">
		<td class="col0"><a href="../alternative_operators" class="wikilink1" title="alternative_operators">or</a></td><td class="col1">alternative to || operator</td>
	</tr>
	<tr class="row8">
		<td class="col0"><a href="../alternative_operators" class="wikilink1" title="alternative_operators">or_eq</a></td><td class="col1">alternative to |= operator</td>
	</tr>
	<tr class="row9">
		<td class="col0"><a href="../alternative_operators" class="wikilink1" title="alternative_operators">xor</a></td><td class="col1">alternative to ^ operator</td>
	</tr>
	<tr class="row10">
		<td class="col0"><a href="../alternative_operators" class="wikilink1" title="alternative_operators">xor_eq</a></td><td class="col1">alternative to ^= operator</td>
	</tr>
	<tr class="row11">
		<td class="col0"><a href="new" class="wikilink1" title="keywords:new">new</a></td><td class="col1">create an object, allocating memory from dynamic pool</td>
	</tr>
	<tr class="row12">
		<td class="col0"><a href="delete" class="wikilink1" title="keywords:delete">delete</a></td><td class="col1">make dynamic memory available (in C++0x also remove a method that would be provided by default otherwise)</td>
	</tr>
	<tr class="row13">
		<td class="col0"><a href="operator" class="wikilink1" title="keywords:operator">operator</a></td><td class="col1">create overloaded operator functions</td>
	</tr>
</table></div>
<!-- EDIT4 TABLE [1518-2619] -->
</div>

<h5><a name="types" id="types">Types</a></h5>
<div class="level5">
<div class="table sectionedit5"><table class="inline">
	<tr class="row0">
		<td class="col0"><a href="int" class="wikilink1" title="keywords:int">int</a></td><td class="col1">name of a builtin default integer type</td>
	</tr>
	<tr class="row1">
		<td class="col0"><a href="long" class="wikilink1" title="keywords:long">long</a></td><td class="col1">name of a builtin long integer variable</td>
	</tr>
	<tr class="row2">
		<td class="col0"><a href="typedef" class="wikilink1" title="keywords:typedef">typedef</a></td><td class="col1">create a new type name from an existing type</td>
	</tr>
	<tr class="row3">
		<td class="col0"><a href="bool" class="wikilink1" title="keywords:bool">bool</a></td><td class="col1">name of builtin boolean type</td>
	</tr>
	<tr class="row4">
		<td class="col0"><a href="char" class="wikilink1" title="keywords:char">char</a></td><td class="col1">name of builtin character type (also 8-bit integer type)</td>
	</tr>
	<tr class="row5">
		<td class="col0"><a href="class" class="wikilink1" title="keywords:class">class</a></td><td class="col1">declare a class</td>
	</tr>
	<tr class="row6">
		<td class="col0"><a href="float" class="wikilink1" title="keywords:float">float</a></td><td class="col1">name of a single precision floating-point type</td>
	</tr>
	<tr class="row7">
		<td class="col0"><a href="double" class="wikilink1" title="keywords:double">double</a></td><td class="col1">name of a builtin double precision floating-point type</td>
	</tr>
	<tr class="row8">
		<td class="col0"><a href="enum" class="wikilink1" title="keywords:enum">enum</a></td><td class="col1">declare an enumeration type</td>
	</tr>
	<tr class="row9">
		<td class="col0"><a href="struct" class="wikilink1" title="keywords:struct">struct</a></td><td class="col1">define a new structure</td>
	</tr>
	<tr class="row10">
		<td class="col0"><a href="void" class="wikilink1" title="keywords:void">void</a></td><td class="col1">name of a builtin void type or declare no return value in function</td>
	</tr>
	<tr class="row11">
		<td class="col0"><a href="wchar_t" class="wikilink1" title="keywords:wchar_t">wchar_t</a></td><td class="col1">name of a builtin wide-character type</td>
	</tr>
	<tr class="row12">
		<td class="col0"><a href="short" class="wikilink1" title="keywords:short">short</a></td><td class="col1">declare a short integer variable</td>
	</tr>
	<tr class="row13">
		<td class="col0"><a href="union" class="wikilink1" title="keywords:union">union</a></td><td class="col1">a structure that assigns multiple variables to the same memory location</td>
	</tr>
</table></div>
<!-- EDIT5 TABLE [2632-3387] -->
</div>

<h5><a name="type_specifiers" id="type_specifiers">Type specifiers</a></h5>
<div class="level5">
<div class="table sectionedit6"><table class="inline">
	<tr class="row0">
		<td class="col0"><a href="template" class="wikilink1" title="keywords:template">template</a></td><td class="col1">create generic functions or classes</td>
	</tr>
	<tr class="row1">
		<td class="col0"><a href="auto" class="wikilink1" title="keywords:auto">auto</a></td><td class="col1"> automatically detect variable type from initializer expression (<a href="../c_0x" class="wikilink1" title="c_0x">C++0x</a> feature) </td>
	</tr>
	<tr class="row2">
		<td class="col0"><a href="inline" class="wikilink1" title="keywords:inline">inline</a></td><td class="col1">declare that a function is to be expanded in place when called (or to undergo vague linkage, if expanding is not possible)</td>
	</tr>
	<tr class="row3">
		<td class="col0"><a href="export" class="wikilink1" title="keywords:export">export</a></td><td class="col1">states that the following template declaration will be defined in another compilation unit</td>
	</tr>
	<tr class="row4">
		<td class="col0"><a href="extern" class="wikilink1" title="keywords:extern">extern</a></td><td class="col1">declares an external linkage for a variable (if not initialized, provides only forwarding declaration for a variable to be declared either later or in another compilation unit) or (extern “C”) declares C linkage for a function</td>
	</tr>
	<tr class="row5">
		<td class="col0"><a href="private" class="wikilink1" title="keywords:private">private</a></td><td class="col1">declare private members of a class</td>
	</tr>
	<tr class="row6">
		<td class="col0"><a href="protected" class="wikilink1" title="keywords:protected">protected</a></td><td class="col1">declare protected members of a class</td>
	</tr>
	<tr class="row7">
		<td class="col0"><a href="public" class="wikilink1" title="keywords:public">public</a></td><td class="col1">declare public members of a class</td>
	</tr>
	<tr class="row8">
		<td class="col0"><a href="signed" class="wikilink1" title="keywords:signed">signed</a></td><td class="col1">modify variable type declarations</td>
	</tr>
	<tr class="row9">
		<td class="col0"><a href="unsigned" class="wikilink1" title="keywords:unsigned">unsigned</a></td><td class="col1">modifier for integer types that makes them only positive range</td>
	</tr>
	<tr class="row10">
		<td class="col0"><a href="register" class="wikilink1" title="keywords:register">register</a></td><td class="col1">request that a variable be implemented by machine&#039;s register rather than on function&#039;s stack</td>
	</tr>
	<tr class="row11">
		<td class="col0"><a href="virtual" class="wikilink1" title="keywords:virtual">virtual</a></td><td class="col1">create a function that can be overridden by a derived class</td>
	</tr>
	<tr class="row12">
		<td class="col0"><a href="static" class="wikilink1" title="keywords:static">static</a></td><td class="col1">create permanent storage for a variable</td>
	</tr>
	<tr class="row13">
		<td class="col0"><a href="volatile" class="wikilink1" title="keywords:volatile">volatile</a></td><td class="col1">warn the compiler about variables that can be modified unexpectedly</td>
	</tr>
	<tr class="row14">
		<td class="col0"><a href="typename" class="wikilink1" title="keywords:typename">typename</a></td><td class="col1">declare that the identifier next to this word must be always interpreted as type (and not a variable or function), also declares type parameter for template</td>
	</tr>
	<tr class="row15">
		<td class="col0"><a href="friend" class="wikilink1" title="keywords:friend">friend</a></td><td class="col1">grant non-member function access to private data</td>
	</tr>
	<tr class="row16">
		<td class="col0"><a href="explicit" class="wikilink1" title="keywords:explicit">explicit</a></td><td class="col1">make a class&#039;s one-argument constructor not allowed to be used for implicit conversions</td>
	</tr>
	<tr class="row17">
		<td class="col0"><a href="mutable" class="wikilink1" title="keywords:mutable">mutable</a></td><td class="col1">wipe constness from a class&#039;s field, when whole object is const</td>
	</tr>
	<tr class="row18">
		<td class="col0"><a href="const" class="wikilink1" title="keywords:const">const</a></td><td class="col1">modifier for a variable, a pointer to, or a reference to, which states that the variable cannot be modified</td>
	</tr>
</table></div>
<!-- EDIT6 TABLE [3411-5165] -->
</div>

<h5><a name="exceptions" id="exceptions">Exceptions</a></h5>
<div class="level5">
<div class="table sectionedit7"><table class="inline">
	<tr class="row0">
		<td class="col0"><a href="try" class="wikilink1" title="keywords:try">try</a></td><td class="col1">execute code that can throw an exception</td>
	</tr>
	<tr class="row1">
		<td class="col0"><a href="catch" class="wikilink1" title="keywords:catch">catch</a></td><td class="col1">handles exceptions from throw</td>
	</tr>
	<tr class="row2">
		<td class="col0"><a href="throw" class="wikilink1" title="keywords:throw">throw</a></td><td class="col1">throws an exception</td>
	</tr>
</table></div>
<!-- EDIT7 TABLE [5183-5307] -->
</div>

<h5><a name="miscellaneous" id="miscellaneous">Miscellaneous</a></h5>
<div class="level5">
<div class="table sectionedit8"><table class="inline">
	<tr class="row0">
		<td class="col0"><a href="asm" class="wikilink1" title="keywords:asm">asm</a></td><td class="col1">insert an assembly instruction</td>
	</tr>
	<tr class="row1">
		<td class="col0"><a href="false" class="wikilink1" title="keywords:false">false</a></td><td class="col1">a constant representing the boolean false value</td>
	</tr>
	<tr class="row2">
		<td class="col0"><a href="true" class="wikilink1" title="keywords:true">true</a></td><td class="col1">a constant representing the boolean true value</td>
	</tr>
	<tr class="row3">
		<td class="col0"><a href="namespace" class="wikilink1" title="keywords:namespace">namespace</a></td><td class="col1">partition the global namespace by defining a scope</td>
	</tr>
	<tr class="row4">
		<td class="col0"><a href="using" class="wikilink1" title="keywords:using">using</a></td><td class="col1">import complete or partial namespaces into the current scope</td>
	</tr>
	<tr class="row5">
		<td class="col0"><a href="typeid" class="wikilink1" title="keywords:typeid">typeid</a></td><td class="col1">describes an object</td>
	</tr>
</table></div>
<!-- EDIT8 TABLE [5328-5659] -->
</div>
</div>
</body>
</html>
