<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="pl"
 lang="pl" dir="ltr">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>pl:preprocessor:define</title>
<meta name="generator" content="DokuWiki" />
<meta name="robots" content="index,follow" />
<meta name="date" content="2010-10-30T05:22:52-0700" />
<meta name="keywords" content="pl,preprocessor,define" />
<link rel="search" type="application/opensearchdescription+xml" href="http://www.cppreference.com/wiki/lib/exe/opensearch.php" title="C++ Reference" />
<link rel="start" href="../../../index.html" />
<link rel="contents" href="http://www.cppreference.com/wiki/pl/preprocessor/define?do=index" title="Indeks" />
<link rel="alternate" type="application/rss+xml" title="Recent Changes" href="http://www.cppreference.com/wiki/feed.php" />
<link rel="alternate" type="application/rss+xml" title="Current Namespace" href="http://www.cppreference.com/wiki/feed.php?mode=list&amp;ns=pl:preprocessor" />
<link rel="alternate" type="text/html" title="Plain HTML" href="http://www.cppreference.com/wiki/_export/xhtml/pl/preprocessor/define" />
<link rel="alternate" type="text/plain" title="Wiki Markup" href="http://www.cppreference.com/wiki/_export/raw/pl/preprocessor/define" />
<link rel="canonical" href="define" />
<link rel="stylesheet" media="screen" type="text/css" href="../../lib/exe/css.php@t=custom1&amp;tseed=1289693594" />
<link rel="stylesheet" media="all" type="text/css" href="../../lib/exe/css.php@s=all&amp;t=custom1&amp;tseed=1289693594" />
<link rel="stylesheet" media="print" type="text/css" href="../../lib/exe/css.php@s=print&amp;t=custom1&amp;tseed=1289693594" />
<script type="text/javascript" ><!--//--><![CDATA[//><!--
var NS='pl:preprocessor';var JSINFO = {"id":"pl:preprocessor:define","namespace":"pl:preprocessor"};
//--><!]]></script>
<script type="text/javascript" charset="utf-8" src="../../lib/exe/js.php@tseed=1289693594" ></script>
</head>
<body>
<div class="dokuwiki export">

<h2 class="sectionedit1"><a name="define" id="define">#define</a></h2>
<div class="level2">

<p>
Dyrektywa <code>#define</code> jest używana do definiowania stałych lub makr, które są rozwijane 
przez preprocesor tuż przed kompilacją właściwego źródła.
</p>

<p>
Składnia:

</p>
<pre class="cpp code cpp">    <span class="co2">#define nazwa_stalej wartosc</span></pre>
</div>
<!-- EDIT1 SECTION "#define" [1-237] -->
<h3 class="sectionedit2"><a name="stale" id="stale">Stałe</a></h3>
<div class="level3">

<p>
Często w programach napisanych w C można spotkać poniższą konstrukcję:

</p>
<pre class="cpp code cpp">    <span class="co2">#define TRUE  1</span>
    <span class="co2">#define FALSE 0</span>
&nbsp;
    <span class="kw4">int</span> done <span class="sy1">=</span> <span class="nu0">0</span><span class="sy4">;</span>
    <span class="kw1">while</span><span class="br0">&#40;</span> done <span class="sy3">!</span><span class="sy1">=</span> TRUE <span class="br0">&#41;</span> <span class="br0">&#123;</span>
        ...
    <span class="br0">&#125;</span></pre>
<p>

Pierwsze dwa wiersze przykładu dają informacje dla preprocesora aby każde wystąpienie <code>TRUE</code> lub <code>FALSE</code> zamienił odpowiednio na <code>1</code> i <code>0</code>.
</p>

<p>
Dobrą praktyką jest pisanie nazw stałych zdefiniowanych w taki sposób wielkimi literami, aby można było je odróżnić od zwykłych zmiennych.
</p>

</div>
<!-- EDIT2 SECTION "Stałe" [238-757] -->
<h3 class="sectionedit3"><a name="makra" id="makra">Makra</a></h3>
<div class="level3">

<p>
Drugą możliwością dyrektywy <code>#define</code> jest definiowanie makr (pseudo-funkcji), 
których ciało jest wklejane w miejsce ich wywołania (tak jak w przypadku stałych).
</p>
<pre class="cpp code cpp">     <span class="co2">#define absolute_value( x ) ( ((x) &lt; 0) ? -(x) : (x) )</span>
     ...
     <span class="kw4">int</span> num <span class="sy1">=</span> <span class="sy2">-</span><span class="nu0">1</span><span class="sy4">;</span>
     <span class="kw1">while</span><span class="br0">&#40;</span> absolute_value<span class="br0">&#40;</span> num <span class="br0">&#41;</span> <span class="br0">&#41;</span> <span class="br0">&#123;</span>
        ...
     <span class="br0">&#125;</span></pre>
<p>
Dobrą praktyką jest umieszczanie argumentów w nawiasach, aby ich wartości mogły być 
prawidłowo odczytane nawet w przypadku złożonych instrukcji. W powyższym przykładzie 
każde użycie <code>x</code> zostało tak potraktowane. Dodatkowo jeśli umieści się w nawiasach 
całe makro, ograniczy to możliwość jego interakcji z innym kodem (co mogłoby powodować trudne do wykrycia błędy).
</p>

<p>
Częstym błędem wynikającym z faktu że makra traktują argumenty jako tekst (etykiety), 
a nie faktyczne wartości jest przykazywanie do makr złożonych instrukcji (które w 
przypadku wielu wywołań zmieniają swoją wartość).
</p>

<p>
Przykładowo, jeśli makra z przykładu wyżej użyjemy w taki sposób:

</p>
<pre class="cpp code cpp">    <span class="kw4">int</span> i <span class="sy1">=</span> <span class="nu0">0</span><span class="sy4">;</span>
    <span class="kw3">cout</span> <span class="sy1">&lt;&lt;</span> absolute_value<span class="br0">&#40;</span>i<span class="sy2">--</span><span class="br0">&#41;</span> <span class="sy1">&lt;&lt;</span> endl<span class="sy4">;</span>
    <span class="kw3">cout</span> <span class="sy1">&lt;&lt;</span> i <span class="sy1">&lt;&lt;</span> endl<span class="sy4">;</span></pre>
<p>

W wyniku otrzymamy:

</p>
<pre class="cpp code cpp">    <span class="sy2">-</span><span class="nu0">1</span>
    <span class="sy2">-</span><span class="nu0">2</span></pre>
<p>
Spowodowane jest to tym że argument <code>i--</code> zostanie po prostu wstawiony w miejsce <code>x</code>:

</p>
<pre class="cpp code cpp">    <span class="kw3">cout</span> <span class="sy1">&lt;&lt;</span> <span class="br0">&#40;</span> <span class="br0">&#40;</span><span class="br0">&#40;</span>i<span class="sy2">--</span><span class="br0">&#41;</span> <span class="sy1">&lt;</span> <span class="nu0">0</span><span class="br0">&#41;</span> <span class="sy4">?</span> <span class="sy2">-</span><span class="br0">&#40;</span>i<span class="sy2">--</span><span class="br0">&#41;</span> <span class="sy4">:</span> <span class="br0">&#40;</span>i<span class="sy2">--</span><span class="br0">&#41;</span> <span class="br0">&#41;</span> <span class="sy1">&lt;&lt;</span> endl<span class="sy4">;</span></pre>
<p>
Tematy pokrewne: <a href="sharp" class="wikilink1" title="pl:preprocessor:sharp"># i ##</a>, <a href="preprocessor_if" class="wikilink1" title="pl:preprocessor:preprocessor_if">#if,...,#endif</a>, <a href="http://www.cppreference.com/wiki/pl/preprocessor/undef" class="wikilink2" title="pl:preprocessor:undef" rel="nofollow">#undef</a>
</p>



</div>
<!-- EDIT3 SECTION "Makra" [758-] --></div>
</body>
</html>
