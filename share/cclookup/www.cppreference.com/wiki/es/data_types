<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="es"
 lang="es" dir="ltr">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>es:data_types</title>
<meta name="generator" content="DokuWiki" />
<meta name="robots" content="index,follow" />
<meta name="date" content="2010-10-28T18:17:32-0700" />
<meta name="keywords" content="es,data_types" />
<link rel="search" type="application/opensearchdescription+xml" href="http://www.cppreference.com/wiki/lib/exe/opensearch.php" title="C++ Reference" />
<link rel="start" href="../../index.html" />
<link rel="contents" href="http://www.cppreference.com/wiki/es/data_types?do=index" title="Índice" />
<link rel="alternate" type="application/rss+xml" title="Recent Changes" href="http://www.cppreference.com/wiki/feed.php" />
<link rel="alternate" type="application/rss+xml" title="Current Namespace" href="http://www.cppreference.com/wiki/feed.php?mode=list&amp;ns=es" />
<link rel="alternate" type="text/html" title="Plain HTML" href="http://www.cppreference.com/wiki/_export/xhtml/es/data_types" />
<link rel="alternate" type="text/plain" title="Wiki Markup" href="http://www.cppreference.com/wiki/_export/raw/es/data_types" />
<link rel="canonical" href="data_types" />
<link rel="stylesheet" media="screen" type="text/css" href="../lib/exe/css.php@t=custom1&amp;tseed=1289693594" />
<link rel="stylesheet" media="all" type="text/css" href="../lib/exe/css.php@s=all&amp;t=custom1&amp;tseed=1289693594" />
<link rel="stylesheet" media="print" type="text/css" href="../lib/exe/css.php@s=print&amp;t=custom1&amp;tseed=1289693594" />
<script type="text/javascript" ><!--//--><![CDATA[//><!--
var NS='es';var JSINFO = {"id":"es:data_types","namespace":"es"};
//--><!]]></script>
<script type="text/javascript" charset="utf-8" src="../lib/exe/js.php@tseed=1289693594" ></script>
</head>
<body>
<div class="dokuwiki export">
<!-- TOC START -->
<div class="toc">
<div class="tocheader toctoggle" id="toc__header">Tabla de Contenidos</div>
<div id="toc__inside">

<ul class="toc">
<li class="clear">

<ul class="toc">
<li class="level2"><div class="li"><span class="li"><a href="data_types#tipos_de_datos_de_c" class="toc">Tipos de Datos de C++</a></span></div>
<ul class="toc">
<li class="level3"><div class="li"><span class="li"><a href="data_types#type_modifiers" class="toc">Type Modifiers</a></span></div></li>
<li class="level3"><div class="li"><span class="li"><a href="data_types#tamanos_y_rangos" class="toc">Tamaños y Rangos</a></span></div></li>
<li class="level3"><div class="li"><span class="li"><a href="data_types#leer_declaraciones_de_datos" class="toc">Leer declaraciones de datos</a></span></div></li></ul>
</li></ul>
</li></ul>
</div>
</div>
<!-- TOC END -->

<h2 class="sectionedit1"><a name="tipos_de_datos_de_c" id="tipos_de_datos_de_c">Tipos de Datos de C++</a></h2>
<div class="level2">

<p>
Los programadores tienen acceso en C++ a cinco tipos de datos originados en C: void, int, float, double, and char.

</p>
<div class="table sectionedit2"><table class="inline">
	<tr class="row0">
		<th class="col0 centeralign">   Tipo   </th><th class="col1 centeralign">  Descripción  </th>
	</tr>
	<tr class="row1">
		<td class="col0 leftalign"><code>void</code>  </td><td class="col1">no está asociado a ningún tipo</td>
	</tr>
	<tr class="row2">
		<td class="col0 leftalign"><code>int</code>   </td><td class="col1">entero</td>
	</tr>
	<tr class="row3">
		<td class="col0"><code>float</code> </td><td class="col1">número de punto flotante</td>
	</tr>
	<tr class="row4">
		<td class="col0"><code>double</code></td><td class="col1">número de punto flotante de doble precisión</td>
	</tr>
	<tr class="row5">
		<td class="col0 leftalign"><code>char</code>  </td><td class="col1">caracter</td>
	</tr>
</table></div>
<!-- EDIT2 TABLE [149-364] -->
<p>

Agregado a esto, C++ define dos tipos básicos más:

</p>
<div class="table sectionedit3"><table class="inline">
	<tr class="row0">
		<th class="col0 centeralign">   Tipo   </th><th class="col1 centeralign">  Descripción  </th>
	</tr>
	<tr class="row1">
		<td class="col0 leftalign"><code>bool</code>  </td><td class="col1">Valor booleano, es decir “verdadero” o “falso”</td>
	</tr>
	<tr class="row2">
		<td class="col0"><code>wchar_t</code></td><td class="col1">caracter ancho</td>
	</tr>
</table></div>
<!-- EDIT3 TABLE [420-538] -->
</div>
<!-- EDIT1 SECTION "Tipos de Datos de C++" [1-539] -->
<h3 class="sectionedit4"><a name="type_modifiers" id="type_modifiers">Type Modifiers</a></h3>
<div class="level3">

<p>

Varios de estos tipos pueden ser modificados usando las palabras clave especiales: <code>signed</code>, <code>unsigned</code>, <code>short</code> y <code>long</code>. Si estas palabras especiales son usadas solas se asume que el tipo de datos es <code>int</code>. A continuación se presenta un listado de los tipos de datos posibles (con los equivalentes compartiendo una misma fila):

</p>
<div class="table sectionedit5"><table class="inline">
	<tr class="row0">
		<th class="col0" colspan="4">tipos de datos enteros</th>
	</tr>
	<tr class="row1">
		<td class="col0 leftalign" colspan="4"><code>bool</code>              </td>
	</tr>
	<tr class="row2">
		<td class="col0 leftalign" colspan="4"><code>char</code>              </td>
	</tr>
	<tr class="row3">
		<td class="col0 leftalign" colspan="4"><code>signed char</code>       </td>
	</tr>
	<tr class="row4">
		<td class="col0 leftalign" colspan="4"><code>unsigned char</code>     </td>
	</tr>
	<tr class="row5">
		<td class="col0 leftalign" colspan="4"><code>wchar_t</code>           </td>
	</tr>
	<tr class="row6">
		<td class="col0 leftalign"><code>short</code>             </td><td class="col1"><code>short int</code></td><td class="col2"><code>signed short</code></td><td class="col3"><code>signed short int</code></td>
	</tr>
	<tr class="row7">
		<td class="col0 leftalign" colspan="2"><code>unsigned short</code>    </td><td class="col2" colspan="2"><code>unsigned short int</code></td>
	</tr>
	<tr class="row8">
		<td class="col0 leftalign"><code>int</code>               </td><td class="col1"><code>signed</code></td><td class="col2" colspan="2"><code>signed int</code></td>
	</tr>
	<tr class="row9">
		<td class="col0 leftalign" colspan="2"><code>unsigned</code>          </td><td class="col2" colspan="2"><code>unsigned int</code></td>
	</tr>
	<tr class="row10">
		<td class="col0 leftalign"><code>long</code>              </td><td class="col1"><code>long int</code></td><td class="col2"><code>signed long</code></td><td class="col3"><code>signed long int</code></td>
	</tr>
	<tr class="row11">
		<td class="col0 leftalign" colspan="2"><code>unsigned long</code>     </td><td class="col2" colspan="2"><code>unsigned long int</code></td>
	</tr>
	<tr class="row12">
		<th class="col0" colspan="4">tipos de datos flotantes</th>
	</tr>
	<tr class="row13">
		<td class="col0 leftalign" colspan="4"><code>float</code>               </td>
	</tr>
	<tr class="row14">
		<td class="col0 leftalign" colspan="4"><code>double</code>              </td>
	</tr>
	<tr class="row15">
		<td class="col0 leftalign" colspan="4"><code>long double</code>         </td>
	</tr>
	<tr class="row16">
		<th class="col0" colspan="4">tipos de datos enteros opcionales</th>
	</tr>
	<tr class="row17">
		<td class="col0 leftalign"><code>long long</code>                    </td><td class="col1"><code>long long int</code></td><td class="col2"><code>signed long long</code></td><td class="col3"><code>signed long long int</code></td>
	</tr>
	<tr class="row18">
		<td class="col0 leftalign" colspan="2"><code>unsigned long long</code>           </td><td class="col2" colspan="2"><code>unsigned long long in</code>t</td>
	</tr>
</table></div>
<!-- EDIT5 TABLE [906-1743] -->
</div>
<!-- EDIT4 SECTION "Type Modifiers" [540-1744] -->
<h3 class="sectionedit6"><a name="tamanos_y_rangos" id="tamanos_y_rangos">Tamaños y Rangos</a></h3>
<div class="level3">

<p>

El tamaño y rango de un tipo de datos depende del compilador. La palabra clave operador <a href="keywords/sizeof" class="wikilink1" title="es:keywords:sizeof">sizeof</a> permite determinar el tamaño de un tipo de datos, expresado (usualmente) en la cantidad de bytes. Muchas arquitecturas implementan tipos de datos con tamaños estandarizados. Por ejemplo, los <code>char</code> son usualmente de 8-bits y los enteros <code>int</code>, así como los <code>float</code>, 32-bits. <code>double</code> es usualmente 64-bit. <code>bool</code> puede ser implementado como 8-bit. <code>long long</code> como 64-bit. 
</p>

<p>
Para obtener los rangos se puede acceder a las cabeceras <code>cfloat</code> (para flotantes) y <code>climits</code> (para enteros).
</p>

<p>
Los límites para los tipos de datos numéricos están definidos en la cabecera <code>&lt;limits&gt;</code>. Por medio del sistema de plantilla <a href="http://www.cppreference.com/wiki/es/limits/numeric_limits" class="wikilink2" title="es:limits:numeric_limits" rel="nofollow">numeric_limits</a> se provee representaciones numéricas de estos límites para los tipos de datos de C++. Para acceder a una de estas expresiones se invoca a la plantilla con el argumento deseado como se muestra en la tabla que sigue.

</p>
<div class="table sectionedit7"><table class="inline">
	<tr class="row0">
		<th class="col0"> Método o Constante </th><th class="col1"> Devuelve </th><th class="col2"> Descripción </th>
	</tr>
	<tr class="row1">
		<td class="col0 leftalign">is_specialized      </td><td class="col1">bool</td><td class="col2"> </td>
	</tr>
	<tr class="row2">
		<td class="col0 leftalign">radix               </td><td class="col1 leftalign">int       </td><td class="col2">base del exponente</td>
	</tr>
	<tr class="row3">
		<td class="col0 leftalign">digits              </td><td class="col1 leftalign">int       </td><td class="col2">nro. de dígitos en la base de la raíz, para la mantisa</td>
	</tr>
	<tr class="row4">
		<td class="col0 leftalign">digits10            </td><td class="col1 leftalign">int       </td><td class="col2">nro. de dígitos en base 10, para la mantisa</td>
	</tr>
	<tr class="row5">
		<td class="col0 leftalign">is_signed           </td><td class="col1">bool</td><td class="col2"> </td>
	</tr>
	<tr class="row6">
		<td class="col0 leftalign">is_integer          </td><td class="col1">bool</td><td class="col2"> </td>
	</tr>
	<tr class="row7">
		<td class="col0 leftalign">is_exact            </td><td class="col1">bool</td><td class="col2"> </td>
	</tr>
	<tr class="row8">
		<td class="col0 leftalign">min()               </td><td class="col1 leftalign">&lt;type&gt;    </td><td class="col2">el valor más pequeño representable (no el “más negativo”)</td>
	</tr>
	<tr class="row9">
		<td class="col0 leftalign">max()               </td><td class="col1 leftalign">&lt;type&gt;    </td><td class="col2">el valor más grande representable</td>
	</tr>
	<tr class="row10">
		<td class="col0 leftalign">epsilon()           </td><td class="col1 leftalign">&lt;type&gt;    </td><td class="col2">grado de error inherente a la representación</td>
	</tr>
	<tr class="row11">
		<td class="col0 leftalign">round_error()       </td><td class="col1 leftalign">&lt;type&gt;    </td><td class="col2">máximo ajuste posible al redondear</td>
	</tr>
	<tr class="row12">
		<td class="col0 leftalign">infinity()          </td><td class="col1">&lt;type&gt;</td><td class="col2"> </td>
	</tr>
	<tr class="row13">
		<td class="col0 leftalign">quiet_NaN()         </td><td class="col1 leftalign">&lt;type&gt;    </td><td class="col2">un número inválido que no marca a un error de punto flotante</td>
	</tr>
	<tr class="row14">
		<td class="col0 leftalign">signaling_NaN()     </td><td class="col1 leftalign">&lt;type&gt;    </td><td class="col2">inválido que sí marca a un error de punto flotante</td>
	</tr>
	<tr class="row15">
		<td class="col0 leftalign">denorm_min()        </td><td class="col1">&lt;type&gt;</td><td class="col2"> </td>
	</tr>
	<tr class="row16">
		<td class="col0 leftalign">min_exponent        </td><td class="col1">int</td><td class="col2"> </td>
	</tr>
	<tr class="row17">
		<td class="col0 leftalign">min_exponent10      </td><td class="col1">int</td><td class="col2"> </td>
	</tr>
	<tr class="row18">
		<td class="col0 leftalign">max_exponent        </td><td class="col1">int</td><td class="col2"> </td>
	</tr>
	<tr class="row19">
		<td class="col0 leftalign">max_exponent10      </td><td class="col1">int</td><td class="col2"> </td>
	</tr>
	<tr class="row20">
		<td class="col0 leftalign">has_infinity        </td><td class="col1">bool</td><td class="col2"> </td>
	</tr>
	<tr class="row21">
		<td class="col0 leftalign">has_quiet_NaN       </td><td class="col1">bool</td><td class="col2"> </td>
	</tr>
	<tr class="row22">
		<td class="col0 leftalign">has_signaling_NaN   </td><td class="col1">bool</td><td class="col2"> </td>
	</tr>
	<tr class="row23">
		<td class="col0 leftalign">has_denorm          </td><td class="col1">&lt;type&gt;_denorm_style</td><td class="col2"> </td>
	</tr>
	<tr class="row24">
		<td class="col0 leftalign">has_denorm_loss     </td><td class="col1">bool</td><td class="col2"> </td>
	</tr>
	<tr class="row25">
		<td class="col0 leftalign">is_iec559           </td><td class="col1">bool</td><td class="col2">conforms to IEC-559</td>
	</tr>
	<tr class="row26">
		<td class="col0 leftalign">is_bounded          </td><td class="col1">bool</td><td class="col2"> </td>
	</tr>
	<tr class="row27">
		<td class="col0 leftalign">is_modulo           </td><td class="col1">bool</td><td class="col2"> </td>
	</tr>
	<tr class="row28">
		<td class="col0 leftalign">traps               </td><td class="col1">bool</td><td class="col2"> </td>
	</tr>
	<tr class="row29">
		<td class="col0 leftalign">tinyness_before     </td><td class="col1">bool</td><td class="col2"> </td>
	</tr>
	<tr class="row30">
		<td class="col0 leftalign">round_style         </td><td class="col1">float_round_style { round_to_nearest, … }</td><td class="col2"> </td>
	</tr>
</table></div>
<!-- EDIT7 TABLE [2762-4234] -->
<p>

El uso más común es la acotación de rangos, para determinar el mínimo y máximo valores posibles que un tipo de datos puede almacenar. Por ejemplo, el siguiente código imprime el valor mínimo y máximo que el tipo de datos <code>short</code> del compilador soporta:

</p>
<pre class="cpp code cpp">  <span class="co2">#include &lt;limits&gt;</span>
  std<span class="sy4">::</span><span class="kw3">cout</span> <span class="sy1">&lt;&lt;</span> <span class="st0">&quot;Maximum short value: &quot;</span> <span class="sy1">&lt;&lt;</span> std<span class="sy4">::</span><span class="me2">numeric_limits</span><span class="sy1">&lt;</span><span class="kw4">short</span><span class="sy1">&gt;</span><span class="sy4">::</span><span class="me2">max</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy1">&lt;&lt;</span> std<span class="sy4">::</span><span class="me2">endl</span><span class="sy4">;</span>
  std<span class="sy4">::</span><span class="kw3">cout</span> <span class="sy1">&lt;&lt;</span> <span class="st0">&quot;Minimum short value: &quot;</span> <span class="sy1">&lt;&lt;</span> std<span class="sy4">::</span><span class="me2">numeric_limits</span><span class="sy1">&lt;</span><span class="kw4">short</span><span class="sy1">&gt;</span><span class="sy4">::</span><span class="me2">min</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy1">&lt;&lt;</span> std<span class="sy4">::</span><span class="me2">endl</span><span class="sy4">;</span></pre>
</div>
<!-- EDIT6 SECTION "Tamaños y Rangos" [1745-4714] -->
<h3 class="sectionedit8"><a name="leer_declaraciones_de_datos" id="leer_declaraciones_de_datos">Leer declaraciones de datos</a></h3>
<div class="level3">

<p>

Las declaraciones simples son fáciles de entender:
</p>
<pre class="cpp code cpp">  <span class="kw4">int</span> i</pre>
<p>
Para las expresiones complejas, se hace difícil entender su significado:
</p>
<pre class="cpp code cpp">  <span class="kw4">double</span> <span class="sy2">**</span>d<span class="br0">&#91;</span><span class="nu0">8</span><span class="br0">&#93;</span>              <span class="co1">// hmm...</span>
  <span class="kw4">char</span> <span class="sy2">*</span><span class="br0">&#40;</span><span class="sy2">*</span><span class="br0">&#40;</span><span class="sy2">**</span>foo <span class="br0">&#91;</span><span class="br0">&#93;</span><span class="br0">&#91;</span><span class="nu0">8</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#91;</span><span class="br0">&#93;</span> <span class="co1">// ...¿qué rayos es ''foo''?</span></pre>
<p>
Para entender estas declaraciones, se puede seguir estas reglas:

</p>
<ol>
<li class="level1"><div class="li"> Empiece con el nombre de la variable (<code>d</code> o <code>foo</code>)</div>
</li>
<li class="level1"><div class="li"> Diríjase hacia el tipo de la variable (<code>double</code> o <code>char</code>)</div>
</li>
<li class="level1"><div class="li"> Avance a la derecha cuando pueda, y a la izquierda cuando deba. (los paréntesis le pueden forzar a moverse a la izquierda)</div>
</li>
</ol>

<p>

Por ejemplo:

</p>
<div class="table sectionedit9"><table class="inline">
	<tr class="row0">
		<th class="col0 centeralign">  Expresión  </th><th class="col1 centeralign">  Significado  </th>
	</tr>
	<tr class="row1">
		<td class="col0"> <code>double **d[8];</code> </td><td class="col1"> </td>
	</tr>
	<tr class="row2">
		<td class="col0"> <code><del>double</del> **<del>d</del>[8];</code> </td><td class="col1"> <strong>d es … double</strong> </td>
	</tr>
	<tr class="row3">
		<td class="col0"> <code><del>double</del> **<del>d[8]</del>;</code> </td><td class="col1"> d es <strong>un array de 8</strong> … double </td>
	</tr>
	<tr class="row4">
		<td class="col0"> <code><del>double</del> *<del>*d[8]</del>;</code> </td><td class="col1"> d es un array de 8 <strong>punteros a</strong> … double </td>
	</tr>
	<tr class="row5">
		<td class="col0"> <code><del>double **d[8]</del>;</code> </td><td class="col1"> d es un array de 8 punteros a <strong>punteros a</strong> double </td>
	</tr>
</table></div>
<!-- EDIT9 TABLE [5354-5755] -->
<p>

Y otro ejemplo:

</p>
<div class="table sectionedit10"><table class="inline">
	<tr class="row0">
		<th class="col0 centeralign">  Expresión  </th><th class="col1 centeralign">  Significado  </th>
	</tr>
	<tr class="row1">
		<td class="col0"> <code>char *(*(**foo [][8])())[]</code> </td><td class="col1"> </td>
	</tr>
	<tr class="row2">
		<td class="col0"> <code><del>char</del> *(*(**<del>foo</del> [][8])())[]</code> </td><td class="col1"> <strong>foo es … char</strong> </td>
	</tr>
	<tr class="row3">
		<td class="col0"> <code><del>char</del> *(*(**<del>foo []</del>[8])())[]</code> </td><td class="col1"> foo es <strong>un array de</strong> … char </td>
	</tr>
	<tr class="row4">
		<td class="col0"> <code><del>char</del> *(*(**<del>foo [][8]</del>)())[]</code> </td><td class="col1"> foo es un array de <strong>un array de 8</strong> … char </td>
	</tr>
	<tr class="row5">
		<td class="col0"> <code><del>char</del> *(*(*<del>*foo [][8]</del>)())[]</code> </td><td class="col1"> foo es un array de un array de 8 <strong>punteros a</strong> … char </td>
	</tr>
	<tr class="row6">
		<td class="col0"> <code><del>char</del> *(*<del>(**foo [][8])</del>())[]</code> </td><td class="col1"> foo es un array de un array de 8 punteros a <strong>punteros a</strong> … char </td>
	</tr>
	<tr class="row7">
		<td class="col0"> <code><del>char</del> *(*<del>(**foo [][8])()</del>)[]</code> </td><td class="col1"> foo es un array de un array de 8 punteros a punteros a <strong>funciones devolviendo</strong> … char </td>
	</tr>
	<tr class="row8">
		<td class="col0"> <code><del>char</del> *<del>(*(**foo [][8])())</del>[]</code> </td><td class="col1"> foo es un array de un array de 8 punteros a punteros a funciones devolviendo <strong>punteros a</strong> … char </td>
	</tr>
	<tr class="row9">
		<td class="col0"> <code><del>char</del> *<del>(*(**foo [][8])())[]</del></code> </td><td class="col1"> foo es un array de un array de 8 punteros a punteros a funciones devolviendo punteros a <strong>array de</strong> … char </td>
	</tr>
	<tr class="row10">
		<td class="col0"> <code><del>char *(*(**foo [][8])())[]</del></code> </td><td class="col1"> foo es un array de un array de 8 punteros a punteros a funciones devolviendo punteros a array de <strong>punteros a</strong> char </td>
	</tr>
</table></div>
<!-- EDIT10 TABLE [5774-7040] -->
<p>

Una explicación mucho más detallasa se puede encontrar en el tutorial para leer descripciones de C de Steve Friedl en <a href="http://www.unixwiz.net/techtips/reading-cdecl.html" class="urlextern" title="http://www.unixwiz.net/techtips/reading-cdecl.html"  rel="nofollow">http://www.unixwiz.net/techtips/reading-cdecl.html</a>.
</p>

<p>
<strong>TIP</strong>: Usar <code>typedef</code> para crear sinónimos a declaraciones de tipos complejas ayuda a facilitar su comprensión.
</p>

</div>
<!-- EDIT8 SECTION "Leer declaraciones de datos" [4715-] --></div>
</body>
</html>
