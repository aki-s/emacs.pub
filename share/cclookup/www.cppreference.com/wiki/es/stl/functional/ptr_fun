<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="es"
 lang="es" dir="ltr">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>es:util:functional:ptr_fun</title>
<meta name="generator" content="DokuWiki" />
<meta name="robots" content="index,follow" />
<meta name="date" content="2010-10-28T18:17:32-0700" />
<meta name="keywords" content="es,util,functional,ptr_fun" />
<link rel="search" type="application/opensearchdescription+xml" href="http://www.cppreference.com/wiki/lib/exe/opensearch.php" title="C++ Reference" />
<link rel="start" href="../../../../index.html" />
<link rel="contents" href="http://www.cppreference.com/wiki/es/util/functional/ptr_fun?do=index" title="Índice" />
<link rel="alternate" type="application/rss+xml" title="Recent Changes" href="http://www.cppreference.com/wiki/feed.php" />
<link rel="alternate" type="application/rss+xml" title="Current Namespace" href="http://www.cppreference.com/wiki/feed.php?mode=list&amp;ns=es:util:functional" />
<link rel="alternate" type="text/html" title="Plain HTML" href="http://www.cppreference.com/wiki/_export/xhtml/es/util/functional/ptr_fun" />
<link rel="alternate" type="text/plain" title="Wiki Markup" href="http://www.cppreference.com/wiki/_export/raw/es/util/functional/ptr_fun" />
<link rel="canonical" href="ptr_fun" />
<link rel="stylesheet" media="screen" type="text/css" href="../../../lib/exe/css.php@t=custom1&amp;tseed=1289693594" />
<link rel="stylesheet" media="all" type="text/css" href="../../../lib/exe/css.php@s=all&amp;t=custom1&amp;tseed=1289693594" />
<link rel="stylesheet" media="print" type="text/css" href="../../../lib/exe/css.php@s=print&amp;t=custom1&amp;tseed=1289693594" />
<script type="text/javascript" ><!--//--><![CDATA[//><!--
var NS='es:util:functional';var JSINFO = {"id":"es:util:functional:ptr_fun","namespace":"es:util:functional"};
//--><!]]></script>
<script type="text/javascript" charset="utf-8" src="../../../lib/exe/js.php@tseed=1289693594" ></script>
</head>
<body>
<div class="dokuwiki export">
<!-- TOC START -->
<div class="toc">
<div class="tocheader toctoggle" id="toc__header">Tabla de Contenidos</div>
<div id="toc__inside">

<ul class="toc">
<li class="level1"><div class="li"><span class="li"><a href="ptr_fun#ptr_fun" class="toc">ptr_fun</a></span></div>
<ul class="toc">
<li class="level2"><div class="li"><span class="li"><a href="ptr_fun#ejemplo" class="toc">Ejemplo</a></span></div></li>
<li class="level2"><div class="li"><span class="li"><a href="ptr_fun#detalles" class="toc">Detalles</a></span></div></li>
<li class="level2"><div class="li"><span class="li"><a href="ptr_fun#topicos_relacionados" class="toc">Tópicos Relacionados</a></span></div></li></ul>
</li></ul>
</div>
</div>
<!-- TOC END -->

<h1 class="sectionedit1"><a name="ptr_fun" id="ptr_fun">ptr_fun</a></h1>
<div class="level1">

<p>
Sintaxis:

</p>
<pre class="cpp code cpp"><span class="kw2">template</span> <span class="sy1">&lt;</span><span class="kw2">class</span> Argumento, <span class="kw2">class</span> Resultado<span class="sy1">&gt;</span>
  std<span class="sy4">::</span><span class="me2">pointer_to_unary_function</span><span class="sy1">&lt;</span>Argumento,Resultado<span class="sy1">&gt;</span> ptr_fun <span class="br0">&#40;</span>Resultado <span class="br0">&#40;</span><span class="sy2">*</span>fn<span class="br0">&#41;</span><span class="br0">&#40;</span>Argumento<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy4">;</span>
&nbsp;
<span class="kw2">template</span> <span class="sy1">&lt;</span><span class="kw2">class</span> Argum1, <span class="kw2">class</span> Argum2, <span class="kw2">class</span> Resultado<span class="sy1">&gt;</span>
  std<span class="sy4">::</span><span class="me2">pointer_to_binary_function</span><span class="sy1">&lt;</span>Argum1,Argum2,Resultado<span class="sy1">&gt;</span> ptr_fun <span class="br0">&#40;</span>Resultado <span class="br0">&#40;</span><span class="sy2">*</span>fn<span class="br0">&#41;</span><span class="br0">&#40;</span>Argum1,Argum2<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy4">;</span></pre><ul>
<li class="level1"><div class="li"> <code>fn</code> es un puntero a una función (la cual debe estar definida cuando <code>ptr_fun</code> es invocada). El tipo de la función es determinado automaticamente en base a su firma, pudiendo tomar un argumento (de tipo <em>Argumento</em>) o dos argumentos (de tipos <em>Argum1</em> y <em>Argum2</em>). Ver sin embargo la sección <a href="ptr_fun#detalles" title="es:util:functional:ptr_fun &crarr;" class="wikilink1">Detalles</a>.</div>
</li>
</ul>

<p>

<strong><code>ptr_fun</code></strong> es una función definida en la cabecera <code>&lt;functional&gt;</code> que crea un functoide desde un puntero a función <code>fn</code>. El functoide define un <code>operator()</code> con lo cual modela el mismo comportamiento que el de invocar de hecho a su función agregada <code>fn</code>.
</p>

<p>
El tipo retornado por la función es el tipo de functoide:

</p>
<ul>
<li class="level1"><div class="li"> <code><a href="http://www.cppreference.com/wiki/es/util/functional/pointer_to_unary_function" class="wikilink2" title="es:util:functional:pointer_to_unary_function" rel="nofollow">pointer_to_unary_function</a>&lt;Argumento,Resultado&gt;</code> si <code>fn</code> tiene un solo argumento.</div>
</li>
<li class="level1"><div class="li"> <code><a href="http://www.cppreference.com/wiki/es/util/functional/pointer_to_binary_function" class="wikilink2" title="es:util:functional:pointer_to_binary_function" rel="nofollow">pointer_to_binary_function</a>&lt;Argum1,Argum2,Resultado&gt;</code> si <code>fn</code> tiene dos argumentos.</div>
</li>
</ul>

<p>

La función está diseñada para ser invocada pasando el functoide resultado a una función o <a href="http://www.cppreference.com/wiki/es/util/algorithm/start" class="wikilink2" title="es:util:algorithm:start" rel="nofollow">algoritmo</a> directamente, sin necesidad de declarar explícitamente una variable y su tipo. En el futuro estándar C++0x, será posible declarar automáticamente una variable functoide gracias a la palabra clave <a href="../../../keywords/auto" class="wikilink1" title="keywords:auto">auto</a>:
</p>
<pre class="c code c++">    <span class="kw4">auto</span> functoide <span class="sy0">=</span> ptr_fun <span class="br0">&#40;</span>fn<span class="br0">&#41;</span><span class="sy0">;</span>
    ....
    <span class="me1">y</span> <span class="sy0">=</span> functoide<span class="br0">&#40;</span>x<span class="br0">&#41;</span><span class="sy0">;</span></pre>
</div>
<!-- EDIT1 SECTION "ptr_fun" [1-1629] -->
<h2 class="sectionedit2"><a name="ejemplo" id="ejemplo">Ejemplo</a></h2>
<div class="level2">

<p>

El siguiente programa <a href="../algorithm/generate_n" class="wikilink1" title="es:stl:algorithm:generate_n">genera un listado</a> de <code>LIM</code> números del tipo <code>double</code>; luego calcula el <a href="http://www.cppreference.com/wiki/es/log" class="wikilink2" title="es:log" rel="nofollow">logaritmo</a> en base <code>B</code> de todos los números y los muestra en la salida:
</p>
<pre class="cpp code cpp"><span class="co2">#include &lt;ctime&gt;</span>
<span class="co2">#include &lt;cstdlib&gt;</span>
<span class="co2">#include &lt;cmath&gt;</span>
<span class="co2">#include &lt;functional&gt;</span>
<span class="co2">#include &lt;algorithm&gt;</span>
<span class="co2">#include &lt;iostream&gt;</span>
<span class="co2">#include &lt;algorithm&gt;</span>
<span class="co2">#include &lt;iterator&gt;</span>
<span class="co2">#include &lt;vector&gt;</span>
&nbsp;
<span class="kw4">const</span> <span class="kw4">unsigned</span> <span class="kw4">int</span> LIM <span class="sy1">=</span> <span class="nu0">20</span><span class="sy4">;</span>
<span class="kw4">const</span> <span class="kw4">unsigned</span> <span class="kw4">int</span> B <span class="sy1">=</span> <span class="nu0">7</span><span class="sy4">;</span>
&nbsp;
<span class="kw2">using</span> <span class="kw2">namespace</span> std<span class="sy4">;</span>
&nbsp;
<span class="kw4">double</span> drand <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
    <span class="kw4">unsigned</span> <span class="kw4">int</span> p<span class="sy1">=</span> <span class="kw3">rand</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy2">/</span> <span class="br0">&#40;</span><span class="nu0">1</span><span class="sy1">&lt;&lt;</span><span class="nu0">16</span><span class="br0">&#41;</span><span class="sy4">;</span>
    <span class="kw4">double</span> dv <span class="sy1">=</span> <span class="br0">&#40;</span><span class="kw4">double</span><span class="br0">&#41;</span><span class="kw3">rand</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy2">*</span> <span class="br0">&#40;</span><span class="nu0">1</span><span class="sy1">&lt;&lt;</span><span class="nu0">4</span><span class="br0">&#41;</span><span class="sy4">;</span>
    <span class="kw1">return</span> <span class="br0">&#40;</span><span class="kw4">double</span><span class="br0">&#41;</span><span class="kw3">rand</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy2">*</span> p <span class="sy2">/</span> <span class="br0">&#40;</span>dv<span class="sy2">+</span><span class="nu0">1</span><span class="br0">&#41;</span><span class="sy4">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="co1">// la siguiente función calcula el logaritmo si el argumento</span>
<span class="co1">// está dentro del dominio de logaritmo,</span>
<span class="co1">// en caso contrario devuelve -1.0</span>
<span class="co1">// (debe ser positivo)</span>
<span class="kw4">double</span> log_acotado <span class="br0">&#40;</span><span class="kw4">double</span> x<span class="br0">&#41;</span> <span class="br0">&#123;</span>
    <span class="kw1">return</span> <span class="br0">&#40;</span>x <span class="sy1">&gt;</span> <span class="nu16">0.0</span><span class="br0">&#41;</span> <span class="sy4">?</span> <span class="kw3">log</span><span class="br0">&#40;</span>x<span class="br0">&#41;</span> <span class="sy4">:</span> <span class="sy2">-</span><span class="nu16">1.0</span><span class="sy4">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw4">int</span> main <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
    <span class="kw4">const</span> <span class="kw4">double</span> LX <span class="sy1">=</span> <span class="kw3">log</span><span class="br0">&#40;</span>B<span class="br0">&#41;</span><span class="sy4">;</span>
    <span class="kw3">srand</span><span class="br0">&#40;</span><span class="kw3">time</span><span class="br0">&#40;</span><span class="nu0">0</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy4">;</span>
    vector<span class="sy1">&lt;</span><span class="kw4">double</span><span class="sy1">&gt;</span> vn<span class="sy4">;</span>
    <span class="co1">// llenar con LIM números</span>
    generate_n <span class="br0">&#40;</span>back_inserter<span class="br0">&#40;</span>vn<span class="br0">&#41;</span>, LIM, ptr_fun<span class="br0">&#40;</span>drand<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy4">;</span>
    <span class="kw3">cout</span><span class="sy1">&lt;&lt;</span> <span class="st0">&quot;Numeros:<span class="es1">\n</span>&quot;</span><span class="sy4">;</span>
    copy <span class="br0">&#40;</span>vn.<span class="me1">begin</span><span class="br0">&#40;</span><span class="br0">&#41;</span>, vn.<span class="me1">end</span><span class="br0">&#40;</span><span class="br0">&#41;</span>, ostream_iterator<span class="sy1">&lt;</span><span class="kw4">double</span><span class="sy1">&gt;</span><span class="br0">&#40;</span><span class="kw3">cout</span>, <span class="st0">&quot;,&quot;</span><span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
    <span class="co1">// calcular los logaritmos y convertirlos a base B</span>
    transform <span class="br0">&#40;</span>vn.<span class="me1">begin</span><span class="br0">&#40;</span><span class="br0">&#41;</span>, vn.<span class="me1">end</span><span class="br0">&#40;</span><span class="br0">&#41;</span>, vn.<span class="me1">begin</span><span class="br0">&#40;</span><span class="br0">&#41;</span>, ptr_fun<span class="br0">&#40;</span>log_acotado<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy4">;</span>
    transform <span class="br0">&#40;</span>vn.<span class="me1">begin</span><span class="br0">&#40;</span><span class="br0">&#41;</span>, vn.<span class="me1">end</span><span class="br0">&#40;</span><span class="br0">&#41;</span>, vn.<span class="me1">begin</span><span class="br0">&#40;</span><span class="br0">&#41;</span>, bind2nd<span class="br0">&#40;</span>divides<span class="sy1">&lt;</span><span class="kw4">double</span><span class="sy1">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span>, LX <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
    <span class="kw3">cout</span><span class="sy1">&lt;&lt;</span> endl<span class="sy4">;</span>
    <span class="co1">// imprimir los resultados</span>
    <span class="kw3">cout</span><span class="sy1">&lt;&lt;</span> <span class="st0">&quot;Logaritmos:<span class="es1">\n</span>&quot;</span><span class="sy4">;</span>
    copy <span class="br0">&#40;</span>vn.<span class="me1">begin</span><span class="br0">&#40;</span><span class="br0">&#41;</span>, vn.<span class="me1">end</span><span class="br0">&#40;</span><span class="br0">&#41;</span>, ostream_iterator<span class="sy1">&lt;</span><span class="kw4">double</span><span class="sy1">&gt;</span><span class="br0">&#40;</span><span class="kw3">cout</span>, <span class="st0">&quot;,&quot;</span><span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
    <span class="kw3">cout</span><span class="sy1">&lt;&lt;</span> endl<span class="sy4">;</span>
    <span class="kw1">return</span> <span class="nu0">0</span><span class="sy4">;</span>
&nbsp;
<span class="br0">&#125;</span></pre>
</div>
<!-- EDIT2 SECTION "Ejemplo" [1630-3180] -->
<h2 class="sectionedit3"><a name="detalles" id="detalles">Detalles</a></h2>
<div class="level2">

<p>

<code>ptr_fun</code> sólo puede determinar los tipos de funciones con punteros a funciones que tomen o uno o dos argumentos.  Para funciones sin argumentos como <a href="http://www.cppreference.com/wiki/es/other/rand" class="wikilink2" title="es:other:rand" rel="nofollow">rand</a>, basta en la mayoría de los casos utilizar solamente el nombre (puntero) de la función. Para funciones de tres o más argumentos, es necesario utilizar una construcción más avanzada como <code>std::function</code> que será incorporada desde C++0x.
</p>

<p>
Si la función <code>fn</code> se encuentra sobrecargada, el compilador no será capaz de determinar a cuál de las posibles resoluciones se desea invocar sólo mirando al nombre (puntero) de la función. En este caso, para poder crear el functoide adecuado es necesario ayudar al compilador indicando explícitamente la firma de la resolución deseada, como en el siguiente ejemplo:
</p>
<pre class="cpp code cpp"><span class="co2">#include &lt;functional&gt;</span>
<span class="co2">#include &lt;iterator&gt;</span>
<span class="co2">#include &lt;algorithm&gt;</span>
<span class="co2">#include &lt;vector&gt;</span>
<span class="co2">#include &lt;cstdlib&gt;</span>
&nbsp;
<span class="kw4">bool</span> fn <span class="br0">&#40;</span><span class="kw4">int</span> x<span class="br0">&#41;</span> <span class="br0">&#123;</span> ... <span class="br0">&#125;</span>
<span class="kw4">bool</span> fn <span class="br0">&#40;</span><span class="kw4">long</span> xl<span class="br0">&#41;</span> <span class="br0">&#123;</span> ... <span class="br0">&#125;</span>
<span class="kw4">bool</span> fn <span class="br0">&#40;</span><span class="kw4">unsigned</span> <span class="kw4">long</span> <span class="kw4">long</span> xull <span class="br0">&#41;</span> <span class="br0">&#123;</span> ... <span class="br0">&#125;</span>
&nbsp;
<span class="kw2">using</span> <span class="kw2">namespace</span> std<span class="sy4">;</span>
&nbsp;
<span class="kw4">int</span> main <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
    <span class="kw4">short</span> datos<span class="br0">&#91;</span><span class="nu0">5</span><span class="br0">&#93;</span> <span class="sy1">=</span> <span class="br0">&#123;</span> <span class="sy2">-</span><span class="nu0">8</span>, <span class="sy2">-</span><span class="nu0">4</span>, <span class="nu0">0</span>, <span class="nu0">4</span>, <span class="nu0">8</span> <span class="br0">&#125;</span><span class="sy4">;</span>
    vector<span class="sy1">&lt;</span><span class="kw4">short</span><span class="sy1">&gt;</span> vi<span class="br0">&#40;</span>datos, datos<span class="sy2">+</span><span class="nu0">5</span><span class="br0">&#41;</span><span class="sy4">;</span>
    vector<span class="sy1">&lt;</span><span class="kw4">bool</span><span class="sy1">&gt;</span> fi<span class="sy4">;</span>
    transform <span class="br0">&#40;</span>vi.<span class="me1">begin</span><span class="br0">&#40;</span><span class="br0">&#41;</span>, vi.<span class="me1">end</span><span class="br0">&#40;</span><span class="br0">&#41;</span>, back_inserter<span class="br0">&#40;</span>fi<span class="br0">&#41;</span>,
               ptr_fun<span class="br0">&#40;</span>fn<span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
               <span class="co1">// ^-- error: &quot;can't match ptr_fun(&lt;unresolved overloaded function&gt;)&quot; o similar</span>
    transform <span class="br0">&#40;</span>vi.<span class="me1">begin</span><span class="br0">&#40;</span><span class="br0">&#41;</span>, vi.<span class="me1">end</span><span class="br0">&#40;</span><span class="br0">&#41;</span>, back_inserter<span class="br0">&#40;</span>fi<span class="br0">&#41;</span>,
               ptr_fun<span class="sy1">&lt;</span><span class="kw4">long</span>,<span class="kw4">bool</span><span class="sy1">&gt;</span><span class="br0">&#40;</span>fn<span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
               <span class="co1">// ^-- OK: escogemos una de las resoluciones explícitamente</span>
    <span class="kw1">return</span> <span class="nu0">0</span><span class="sy4">;</span>
<span class="br0">&#125;</span></pre>
</div>
<!-- EDIT3 SECTION "Detalles" [3181-4750] -->
<h2 class="sectionedit4"><a name="topicos_relacionados" id="topicos_relacionados">Tópicos Relacionados</a></h2>
<div class="level2">
<ul>
<li class="level1"><div class="li"> <code><a href="mem_fun" class="wikilink1" title="es:util:functional:mem_fun">mem_fun</a></code>, <code><a href="http://www.cppreference.com/wiki/es/util/functional/mem_fun_ptr" class="wikilink2" title="es:util:functional:mem_fun_ptr" rel="nofollow">mem_fun_ptr</a></code> – crear functoides desde funciones miembro de una clase</div>
</li>
<li class="level1"><div class="li"> <code><a href="bind1st" class="wikilink1" title="es:util:functional:bind1st">bind1st</a></code>, <code><a href="bind2nd" class="wikilink1" title="es:util:functional:bind2nd">bind2nd</a></code> – fijar los parámetros de un functoide</div>
</li>
</ul>

</div>
<!-- EDIT4 SECTION "Tópicos Relacionados" [4751-] --></div>
</body>
</html>
